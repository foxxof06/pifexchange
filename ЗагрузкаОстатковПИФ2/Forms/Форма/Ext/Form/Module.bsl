Перем СоответствияТипов; 
Перем СоответствияОбъектыВыбора;      
Перем ТаблицаПериодическихДанныхНедвижимости;

Перем ТаблицаПериодическихДанныхГражданства;
Перем ТаблицаПериодическихДанныхФИО;
Перем ТаблицаПериодическихДанныхДокументовУдостоверяющихЛичность;

Перем КомментарийДокументовОстатков;         

Перем ВидыОперацийВводаОстатковРучнымиОперациями;


Перем ОбщиеСоответствия;    

Перем КэшДокументовОстатков;

//todo                           
//1. Проверка на отсутствие дублей по коду для:
//	Валюты
//	ПланСчетов    
//2. При записи по наименование для типов с поиском, наименование может быть обрезано - учесть это при поиске

						  
						  
&НаСервере
Процедура Команда1НаСервере()          
	
	ДанныеФайлаСхемыОстатки = ПолучитьИзВременногоХранилища(АдресФайлаСхемыОстатки);
	ДанныеФайлаСхемыОбъекты = ПолучитьИзВременногоХранилища(АдресФайлаСхемыОбъекты);
	
	КаталогВременныхФайлов = КаталогВременныхФайлов();  
	
	ПутьКДаннымСхемыОстатки = КаталогВременныхФайлов + "Остатки.xsd";
	ПутьКДаннымСхемыОбъекты = КаталогВременныхФайлов + "Объекты.xsd";
	
	ДанныеФайлаСхемыОстатки.Записать(ПутьКДаннымСхемыОстатки);
	ДанныеФайлаСхемыОбъекты.Записать(ПутьКДаннымСхемыОбъекты);
	
	
	ФабрикаОстаткиXDTO = РаботаСXDTO.НоваяФабрикаXDTO(ПутьКДаннымСхемыОстатки); 
	ФабрикаОбъектыXDTO = РаботаСXDTO.НоваяФабрикаXDTO(ПутьКДаннымСхемыОбъекты);   
	
	
	ДанныеФайлаОстатки = ПолучитьИзВременногоХранилища(АдресФайлаОстатки);
	ДанныеФайлаОбъекты = ПолучитьИзВременногоХранилища(АдресФайлаОбъекты);
	 
	ПутьКДаннымОстатки = КаталогВременныхФайлов + "Остатки.xml";
	ПутьКДаннымОбъекты = КаталогВременныхФайлов + "Объекты.xml";
	
	ДанныеФайлаОстатки.Записать(ПутьКДаннымОстатки);
	ДанныеФайлаОбъекты.Записать(ПутьКДаннымОбъекты);


	ОбъектыXDTO = РаботаСXDTO.ПрочитатьФайлXML(ФабрикаОбъектыXDTO, ПутьКДаннымОбъекты, "ДанныеПакета");    
	ОстаткиXDTO = РаботаСXDTO.ПрочитатьФайлXML(ФабрикаОстаткиXDTO, ПутьКДаннымОстатки, "ДанныеПакета");
	
	
	КомментарийДокументовОстатков = "<Автоматический перенос остатков>";   
	
	ВидыОперацийВводаОстатковРучнымиОперациями = ВидыОперацийВводаОстатковРучнымиОперациями();    
	

	
	ТаблицаПериодическихДанныхНедвижимости = Новый ТаблицаЗначений;                                                  
	ТаблицаПериодическихДанныхНедвижимости.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ТаблицаПериодическихДанныхНедвижимости.Колонки.Добавить("Актив", Новый ОписаниеТипов("СправочникСсылка.Активы"));
	ТаблицаПериодическихДанныхНедвижимости.Колонки.Добавить("Назначение", Новый ОписаниеТипов("СправочникСсылка.НазначенияОбъектовНедвижимости"));
	ТаблицаПериодическихДанныхНедвижимости.Колонки.Добавить("ВидНедвижимости", Новый ОписаниеТипов("СправочникСсылка.ВидыНедвижимости"));
	ТаблицаПериодическихДанныхНедвижимости.Колонки.Добавить("КадастровыйНомер", Новый ОписаниеТипов("Строка"));
	ТаблицаПериодическихДанныхНедвижимости.Колонки.Добавить("Площадь", Новый ОписаниеТипов("Число"));
	ТаблицаПериодическихДанныхНедвижимости.Колонки.Добавить("ПолезнаяПлощадь", Новый ОписаниеТипов("Число"));
	ТаблицаПериодическихДанныхНедвижимости.Колонки.Добавить("Адрес", Новый ОписаниеТипов("Строка"));
	ТаблицаПериодическихДанныхНедвижимости.Колонки.Добавить("Страна", Новый ОписаниеТипов("СправочникСсылка.СтраныМира")); 
	
	
	ТаблицаПериодическихДанныхГражданства = Новый ТаблицаЗначений;                                                  
	ТаблицаПериодическихДанныхГражданства.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ТаблицаПериодическихДанныхГражданства.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаПериодическихДанныхГражданства.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаПериодическихДанныхГражданства.Колонки.Добавить("Страна", Новый ОписаниеТипов("СправочникСсылка.СтраныМира"));     
	
	ТаблицаПериодическихДанныхФИО = Новый ТаблицаЗначений;                                                  
	ТаблицаПериодическихДанныхФИО.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ТаблицаПериодическихДанныхФИО.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаПериодическихДанныхФИО.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаПериодическихДанныхФИО.Колонки.Добавить("Фамилия", Новый ОписаниеТипов("СТРОКА")); 
	ТаблицаПериодическихДанныхФИО.Колонки.Добавить("Имя", Новый ОписаниеТипов("СТРОКА")); 
	ТаблицаПериодическихДанныхФИО.Колонки.Добавить("Отчество", Новый ОписаниеТипов("СТРОКА")); 
	
	ТаблицаПериодическихДанныхДокументовУдостоверяющихЛичность = Новый ТаблицаЗначений;                                                  
	ТаблицаПериодическихДанныхДокументовУдостоверяющихЛичность.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ТаблицаПериодическихДанныхДокументовУдостоверяющихЛичность.Колонки.Добавить("Физлицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаПериодическихДанныхДокументовУдостоверяющихЛичность.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаПериодическихДанныхДокументовУдостоверяющихЛичность.Колонки.Добавить("ВидДокумента", Новый ОписаниеТипов("СправочникСсылка.ВидыДокументовФизическихЛиц"));
	ТаблицаПериодическихДанныхДокументовУдостоверяющихЛичность.Колонки.Добавить("Серия", Новый ОписаниеТипов("СТРОКА")); 
	ТаблицаПериодическихДанныхДокументовУдостоверяющихЛичность.Колонки.Добавить("Номер", Новый ОписаниеТипов("СТРОКА")); 
	ТаблицаПериодическихДанныхДокументовУдостоверяющихЛичность.Колонки.Добавить("ДатаВыдачи", Новый ОписаниеТипов("Дата"));
	ТаблицаПериодическихДанныхДокументовУдостоверяющихЛичность.Колонки.Добавить("СрокДействия", Новый ОписаниеТипов("Дата"));
	ТаблицаПериодическихДанныхДокументовУдостоверяющихЛичность.Колонки.Добавить("КемВыдан", Новый ОписаниеТипов("СТРОКА")); 
	ТаблицаПериодическихДанныхДокументовУдостоверяющихЛичность.Колонки.Добавить("КодПодразделения", Новый ОписаниеТипов("СТРОКА")); 
	ТаблицаПериодическихДанныхДокументовУдостоверяющихЛичность.Колонки.Добавить("ЯвляетсяДокументомУдостоверяющимЛичность", Новый ОписаниеТипов("Булево"));
	ТаблицаПериодическихДанныхДокументовУдостоверяющихЛичность.Колонки.Добавить("Представление", Новый ОписаниеТипов("СТРОКА")); 
	
	//Типы из схемы xsd - метаданным пиф3
	СоответствияТипов = СоответствияМетаданных();         
	
	//Типы которые обрабатываются собственными обработчиками, например валюты ищем по коду, а не по ссылке
	//Орг. правовые формы по наименованию и т.д. 
	СоответствияОбъектыВыбора = СоответствияОбъектыВыбора();     
	
	//Общие объекты сопоставления, предопределенные валюты, ОПФ и т.д.
	ОбщиеСоответствия = ОбщиеСоответствия();   
	
	//Кэш уже созданных документов ввода остатков по типам
	КэшДокументовОстатков = СозданныеДокументыВводаОстатков(ОстаткиXDTO.ДанныеXML.Остатки);
		
	
	Если ЗагружатьДанныеОбъектов Тогда	
		ЗагрузитьДанныеОбъектов(ОбъектыXDTO.ДанныеXML);      
		//ЗагрузитьДанныеОбъектовПоТипу(ОбъектыXDTO.ДанныеXML, "Справочники", "Контрагенты");
	КонецЕсли;  	
		
	Если ЗагружатьВводНачальныхОстатковПоИмуществу Тогда
		ОбработатьВводНачальныхОстатковПоИмуществу(ОстаткиXDTO.ДанныеXML.Остатки.ВводНачальныхОстатковПоИмуществу);   
	КонецЕсли;
	
	Если ЗагружатьВводНачальныхОстатковПоДенежнымСредствам Тогда
		ОбработатьВводНачальныхОстатковПоДенежнымСредствам(ОстаткиXDTO.ДанныеXML.Остатки.ВводНачальныхОстатковПоДенежнымСредствам); 
	КонецЕсли;	
	
	Если ЗагружатьВводНачальныхОстатковПоВзаиморасчетам Тогда
		ОбработатьВводНачальныхОстатковПоВзаиморасчетам(ОстаткиXDTO.ДанныеXML.Остатки.ВводНачальныхОстатковПоЗадолженности);
	КонецЕсли;  
	
	Если ЗагружатьВводНачальныхОстатковПоНДС Тогда
		ОбработатьВводНачальныхОстатковПоНДС(ОстаткиXDTO.ДанныеXML.Остатки.ВводНачальныхОстатковНДС);                               
	КонецЕсли;  
	
	Если ЗагружатьВводНачальныхОстатковПоДенежнымТребованиям Тогда
		ОбработатьВводНачальныхОстатковПоДенежнымТребованиям(ОстаткиXDTO.ДанныеXML.Остатки.ВводНачальныхОстатковПоДенежнымТребованиям); 
	КонецЕсли;  
	
	Если ЗагружатьВводНачальныхОстатковПоПайщикам Тогда
		ОбработатьВводНачальныхОстатковПоПайщикам(ОстаткиXDTO.ДанныеXML.Остатки.ВводНачальныхОстатковПоПайщикам); 
	КонецЕсли;
	
	Если ЗагружатьВводНачальныхОстатковПоНалогам Тогда
		ОбработатьВводНачальныхОстатковПоНалогам(ОстаткиXDTO.ДанныеXML.Остатки.ВводНачальныхОстатковПоНалогам);    
	КонецЕсли;
	
	Если ЗагружатьВводДанныхРегистрацияЗемельныхУчастков Тогда
		ОбработатьВводДанныхРегистрацияЗемельныхУчастков(ОстаткиXDTO.ДанныеXML.Остатки.ВводДанныхРегистрацияЗемельныхУчастков); 
	КонецЕсли;
	
	Если ЗагружатьВводПрочихДанных Тогда
		ОбработатьВводПрочихДанных(ОстаткиXDTO.ДанныеXML.Остатки.ВводПрочихДанных[0]);
	КонецЕсли;
                                    
	
	ЗагрузитьПериодическиеДанные();
	
КонецПроцедуры     

Функция ПолучитьПортфелиОтбора()
	
	ПортфельОтбора = Новый Массив;
	
	Для Каждого Отбор Из ОтборПортфелей Цикл
		
		Если Не Отбор.Загружать Тогда
			Продолжить;
		КонецЕсли;	
		
		ПортфельОтбора.Добавить(Отбор.Портфель);
		
	КонецЦикла;	                                 
	
	Возврат ПортфельОтбора;
	
КонецФункции

Процедура ЗагрузитьПериодическиеДанные()   	
	
		
	РазмерПакетаЗаписи = 100;      
	
	РегистрЗаписи = РегистрыСведений.ИсторияРеквизитовОбъектовНедвижимости;
	НаборЗаписей = РегистрЗаписи.СоздатьНаборЗаписей(); 

	Счетчик = 1;  
	ВсегоЗаписей = ТаблицаПериодическихДанныхНедвижимости.Количество();
	
	Для Каждого ЗаписьДанных Из ТаблицаПериодическихДанныхНедвижимости Цикл

		Счетчик = Счетчик + 1;	
		НоваяЗапись = НаборЗаписей.Добавить();       
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ЗаписьДанных);     
		
		НоваяЗапись.НазначениеОбъектаНедвижимости = ЗаписьДанных.Назначение;
		
			
		Если Счетчик = РазмерПакетаЗаписи Тогда
			
			НаборЗаписей.Записать(Истина);
			Счетчик = 1;
			НаборЗаписей = РегистрЗаписи.СоздатьНаборЗаписей();    
		ИначеЕсли Счетчик = ВсегоЗаписей Тогда 
			НаборЗаписей.Записать(Истина);	
		КонецЕсли; 
		
	КонецЦикла;            
	

	РегистрЗаписи = РегистрыСведений.ГражданствоФизическихЛиц;
	НаборЗаписей = РегистрЗаписи.СоздатьНаборЗаписей(); 

	Счетчик = 1;    
	ВсегоЗаписей = ТаблицаПериодическихДанныхГражданства.Количество();

	
	Для Каждого ЗаписьДанных Из ТаблицаПериодическихДанныхГражданства Цикл
		
		Счетчик = Счетчик + 1;
		
		Если Не ЗначениеЗаполнено(ЗаписьДанных.ФизическоеЛицо) Тогда
			Продолжить;	
		КонецЕсли;

		НоваяЗапись = НаборЗаписей.Добавить();       
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ЗаписьДанных);     
			
	
		
		Если Счетчик = РазмерПакетаЗаписи Тогда
			
			НаборЗаписей.Записать(Истина);
			Счетчик = 1;
			НаборЗаписей = РегистрЗаписи.СоздатьНаборЗаписей();
		ИначеЕсли Счетчик = ВсегоЗаписей Тогда 
			НаборЗаписей.Записать(Истина);	
		КонецЕсли; 
	
	 
		
	КонецЦикла;    
	
	РегистрЗаписи = РегистрыСведений.ФИОФизическихЛиц;
	НаборЗаписей = РегистрЗаписи.СоздатьНаборЗаписей(); 

	Счетчик = 1;
	ВсегоЗаписей = ТаблицаПериодическихДанныхФИО.Количество();

	
	Для Каждого ЗаписьДанных Из ТаблицаПериодическихДанныхФИО Цикл    
		
		Счетчик = Счетчик + 1;
		
		Если Не ЗначениеЗаполнено(ЗаписьДанных.ФизическоеЛицо) Тогда
			Продолжить;	
		КонецЕсли;
		
		
		НоваяЗапись = НаборЗаписей.Добавить();       
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ЗаписьДанных);     
			
		
		
		Если Счетчик = РазмерПакетаЗаписи Тогда
			
			НаборЗаписей.Записать(Истина);
			Счетчик = 1;
			НаборЗаписей = РегистрЗаписи.СоздатьНаборЗаписей();
		ИначеЕсли Счетчик = ВсегоЗаписей Тогда 
			НаборЗаписей.Записать(Истина);	
		КонецЕсли; 
	
	 
		
	КонецЦикла;
	
	РегистрЗаписи = РегистрыСведений.ДокументыФизическихЛиц;
	НаборЗаписей = РегистрЗаписи.СоздатьНаборЗаписей(); 

	Счетчик = 1;      
	ВсегоЗаписей = ТаблицаПериодическихДанныхДокументовУдостоверяющихЛичность.Количество();

	
	Для Каждого ЗаписьДанных Из ТаблицаПериодическихДанныхДокументовУдостоверяющихЛичность Цикл 
		
		Счетчик = Счетчик + 1;
		
		Если Не ЗначениеЗаполнено(ЗаписьДанных.Физлицо) Тогда
			Продолжить;	
		КонецЕсли;

		
		НоваяЗапись = НаборЗаписей.Добавить();       
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ЗаписьДанных);  
			
		
		
		Если Счетчик = РазмерПакетаЗаписи Тогда
			
			НаборЗаписей.Записать(Истина);
			Счетчик = 1;
			НаборЗаписей = РегистрЗаписи.СоздатьНаборЗаписей();
		ИначеЕсли Счетчик = ВсегоЗаписей Тогда 
			НаборЗаписей.Записать(Истина);	
		КонецЕсли; 
	 
		
	КонецЦикла;


	
	
КонецПроцедуры

Функция ВидыОперацийВводаОстатковРучнымиОперациями()
	
	ВводОстатковПоНалогам_НДС = ПолучитьСсылкуНаОбъект("bc34dacc-8f82-422f-9aac-7de4a3d7c62f", Справочники.ТиповыеОперации);
	ВводОстатковПоНалогам_НДФЛ = ПолучитьСсылкуНаОбъект("402e5a1d-2ef0-493d-8de6-d7103cd987e6", Справочники.ТиповыеОперации);
	ВводОстатковПоНалогам_ЗемельныйНалог = ПолучитьСсылкуНаОбъект("6b199959-7ddf-4b67-a930-66c7f91ef576", Справочники.ТиповыеОперации);
	ВводОстатковПоНалогам_НалогНаИмущество = ПолучитьСсылкуНаОбъект("4e32dd2a-bba6-449a-94b5-5e58b5e33cf3", Справочники.ТиповыеОперации);           
	
	ПлановыеДатыПереоценки = ПолучитьСсылкуНаОбъект("2cf0bd04-1081-461b-826e-f6d3cfeed228", Справочники.ТиповыеОперации);  
	
	Результат = Новый Структура;
	Результат.Вставить("ВводОстатковПоНалогам_НДС", ВводОстатковПоНалогам_НДС);
	Результат.Вставить("ВводОстатковПоНалогам_НДФЛ", ВводОстатковПоНалогам_НДС);
	Результат.Вставить("ВводОстатковПоНалогам_ЗемельныйНалог", ВводОстатковПоНалогам_ЗемельныйНалог);
	Результат.Вставить("ВводОстатковПоНалогам_НалогНаИмущество", ВводОстатковПоНалогам_НалогНаИмущество); 
	Результат.Вставить("ПлановыеДатыПереоценки", ПлановыеДатыПереоценки); 
	
	Для Каждого КлючЗначение Из Результат Цикл
		
		СсылкаНаОбъект = КлючЗначение.Значение;
		
		Если Не ОбъектСуществуетПоСсылке(СсылкаНаОбъект) Тогда
			
			НовыйОбъект = Справочники.ТиповыеОперации.СоздатьЭлемент();
			НовыйОбъект.Наименование = КлючЗначение.Ключ;
			НовыйОбъект.ОбменДанными.Загрузка = Истина;         
			
			НовыйОбъект.УстановитьСсылкуНового(СсылкаНаОбъект);
			
			НовыйОбъект.Записать();
			
		КонецЕсли;   	
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

 
Функция ПолучитьСоздатьДокументРучнойОперации(Портфель, ТиповаяОперация)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОперацияБух.Ссылка КАК Ссылка,
	               |	ОперацияБух.ТиповаяОперация КАК ТиповаяОперация
	               |ИЗ
	               |	Документ.ОперацияБух КАК ОперацияБух
	               |ГДЕ
	               |	НЕ ОперацияБух.ПометкаУдаления
	               |	И ОперацияБух.ТиповаяОперация В(&ТиповаяОперация)
	               |	И ОперацияБух.Портфель = &Портфель";
	     	
	
	Запрос.УстановитьПараметр("ТиповаяОперация", ТиповаяОперация);
	Запрос.УстановитьПараметр("Портфель", Портфель);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ДокументыОперацияСсылка = Документы.ОперацияБух.ПустаяСсылка();
	
	Если Выборка.Следующий() Тогда
		
		ДокументыОперацияСсылка = Выборка.Ссылка;
		ДокументыОперацияОбъект = Выборка.Ссылка.ПолучитьОбъект(); 
		
	КонецЕсли;     
	
	Если Не ЗначениеЗаполнено(ДокументыОперацияСсылка) Тогда
		
		ДокументыОперацияОбъект = Документы.ОперацияБух.СоздатьДокумент();
		ДокументыОперацияОбъект.Портфель = Портфель;
		ДокументыОперацияОбъект.Дата = ТекущаяДатаСеанса();      
		ДокументыОперацияОбъект.ТиповаяОперация = ТиповаяОперация;
		ДокументыОперацияОбъект.СпособЗаполнения = "ТиповаяОперация";
		
	КонецЕсли;
	
	Возврат ДокументыОперацияОбъект;
	
КонецФункции

Функция  СозданныеДокументыВводаОстатков(ДанныеXDTO)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВводНачальныхОстатковПоПайщикам.Портфель КАК Портфель,
	               |	ВводНачальныхОстатковПоПайщикам.Дата КАК Дата,
	               |	ВводНачальныхОстатковПоПайщикам.ВидОперации КАК ВидОперации,
	               |	ВводНачальныхОстатковПоПайщикам.Ссылка КАК Ссылка,
	               |	ТИПЗНАЧЕНИЯ(ВводНачальныхОстатковПоПайщикам.Ссылка) КАК ТипДокумента
	               |ИЗ
	               |	Документ.ВводНачальныхОстатковПоПайщикам КАК ВводНачальныхОстатковПоПайщикам
	               |ГДЕ
	               |	НЕ ВводНачальныхОстатковПоПайщикам.ПометкаУдаления
	               |	И ВводНачальныхОстатковПоПайщикам.Комментарий = &Комментарий
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВводНачальныхОстатковНДС.Дата КАК Дата,
	               |	ВводНачальныхОстатковНДС.Портфель КАК Портфель,
	               |	ВводНачальныхОстатковНДС.РазделУчета КАК РазделУчета,
	               |	ВводНачальныхОстатковНДС.Комментарий КАК Комментарий,
	               |	ВводНачальныхОстатковНДС.Ссылка КАК Ссылка,
				   |	ТИПЗНАЧЕНИЯ(ВводНачальныхОстатковНДС.Ссылка) КАК ТипДокумента
	               |ИЗ
	               |	Документ.ВводНачальныхОстатковНДС КАК ВводНачальныхОстатковНДС
	               |ГДЕ
	               |	НЕ ВводНачальныхОстатковНДС.ПометкаУдаления
	               |	И ВводНачальныхОстатковНДС.Комментарий = &Комментарий
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВводНачальныхОстатковПоДенежнымСредствам.Портфель КАК Портфель,
	               |	ВводНачальныхОстатковПоДенежнымСредствам.Дата КАК Дата,
	               |	ВводНачальныхОстатковПоДенежнымСредствам.Комментарий КАК Комментарий,
	               |	ВводНачальныхОстатковПоДенежнымСредствам.Ссылка КАК Ссылка,
				   |	ТИПЗНАЧЕНИЯ(ВводНачальныхОстатковПоДенежнымСредствам.Ссылка) КАК ТипДокумента
	               |ИЗ
	               |	Документ.ВводНачальныхОстатковПоДенежнымСредствам КАК ВводНачальныхОстатковПоДенежнымСредствам
	               |ГДЕ
	               |	ВводНачальныхОстатковПоДенежнымСредствам.Комментарий = &Комментарий
	               |	И НЕ ВводНачальныхОстатковПоДенежнымСредствам.ПометкаУдаления
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВводНачальныхОстатковПоДенежнымТребованиям.Портфель КАК Портфель,
	               |	ВводНачальныхОстатковПоДенежнымТребованиям.Дата КАК Дата,
	               |	ВводНачальныхОстатковПоДенежнымТребованиям.Комментарий КАК Комментарий,
	               |	ВводНачальныхОстатковПоДенежнымТребованиям.МестоХранения КАК МестоХранения,
	               |	ВводНачальныхОстатковПоДенежнымТребованиям.Раздел КАК Раздел,
	               |	ВводНачальныхОстатковПоДенежнымТребованиям.Партия КАК Партия,
	               |	ВводНачальныхОстатковПоДенежнымТребованиям.Ссылка КАК Ссылка,
				   |	ТИПЗНАЧЕНИЯ(ВводНачальныхОстатковПоДенежнымТребованиям.Ссылка) КАК ТипДокумента
	               |ИЗ
	               |	Документ.ВводНачальныхОстатковПоДенежнымТребованиям КАК ВводНачальныхОстатковПоДенежнымТребованиям
	               |ГДЕ
	               |	ВводНачальныхОстатковПоДенежнымТребованиям.Комментарий = &Комментарий
	               |	И НЕ ВводНачальныхОстатковПоДенежнымТребованиям.ПометкаУдаления
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВводНачальныхОстатковПоЗадолженности.Портфель КАК Портфель,
	               |	ВводНачальныхОстатковПоЗадолженности.Дата КАК Дата,
	               |	ВводНачальныхОстатковПоЗадолженности.Комментарий КАК Комментарий,
	               |	ВводНачальныхОстатковПоЗадолженности.ВидЗадолженности КАК ВидЗадолженности,
	               |	ВводНачальныхОстатковПоЗадолженности.Ссылка КАК Ссылка,
				   |	ТИПЗНАЧЕНИЯ(ВводНачальныхОстатковПоЗадолженности.Ссылка) КАК ТипДокумента
	               |ИЗ
	               |	Документ.ВводНачальныхОстатковПоЗадолженности КАК ВводНачальныхОстатковПоЗадолженности
	               |ГДЕ
	               |	НЕ ВводНачальныхОстатковПоЗадолженности.ПометкаУдаления
	               |	И ВводНачальныхОстатковПоЗадолженности.Комментарий = &Комментарий
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВводНачальныхОстатковПоИмуществу.Портфель КАК Портфель,
	               |	ВводНачальныхОстатковПоИмуществу.ВидОперации КАК ВидОперации,
	               |	ВводНачальныхОстатковПоИмуществу.Комментарий КАК Комментарий,
	               |	ВводНачальныхОстатковПоИмуществу.Дата КАК Дата,
	               |	ВводНачальныхОстатковПоИмуществу.Ссылка КАК Ссылка, 
				   |	ТИПЗНАЧЕНИЯ(ВводНачальныхОстатковПоИмуществу.Ссылка) КАК ТипДокумента
	               |ИЗ
	               |	Документ.ВводНачальныхОстатковПоИмуществу КАК ВводНачальныхОстатковПоИмуществу
	               |ГДЕ
	               |	НЕ ВводНачальныхОстатковПоИмуществу.ПометкаУдаления
	               |	И ВводНачальныхОстатковПоИмуществу.Комментарий = &Комментарий
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВводНачальныхОстатковПоЦеннымБумагам.Ссылка КАК Ссылка,
	               |	ВводНачальныхОстатковПоЦеннымБумагам.Дата КАК Дата,
	               |	ВводНачальныхОстатковПоЦеннымБумагам.Портфель КАК Портфель,
	               |	ВводНачальныхОстатковПоЦеннымБумагам.МестоХранения КАК МестоХранения,
	               |	ВводНачальныхОстатковПоЦеннымБумагам.Раздел КАК Раздел,
	               |	ВводНачальныхОстатковПоЦеннымБумагам.Комментарий КАК Комментарий,
	               |	ВводНачальныхОстатковПоЦеннымБумагам.Партия КАК Партия,
				   |	ТИПЗНАЧЕНИЯ(ВводНачальныхОстатковПоЦеннымБумагам.Ссылка) КАК ТипДокумента 
				   |ИЗ
	               |	Документ.ВводНачальныхОстатковПоЦеннымБумагам КАК ВводНачальныхОстатковПоЦеннымБумагам
	               |ГДЕ
	               |	ВводНачальныхОстатковПоЦеннымБумагам.Комментарий = &Комментарий
	               |	И НЕ ВводНачальныхОстатковПоЦеннымБумагам.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Комментарий", КомментарийДокументовОстатков);
	
	Результат = Запрос.ВыполнитьПакет();
	
	Кэш = Новый Соответствие;
	
	Для тт = 0 по Результат.ВГраница() Цикл      
		
		Если Результат[тт].Пустой() Тогда
			Продолжить;
		КонецЕсли;           
		
		ТаблицаПакета = Результат[тт].Выгрузить();
		
		ТипДокумента = ТаблицаПакета[0].ТипДокумента;
		
		Кэш[ТипДокумента] = ТаблицаПакета;		
		
	КонецЦикла;    
	
	Возврат Кэш;
	
КонецФункции

Функция ОбщиеСоответствия()

ОбщиеСоответствия = Новый Соответствие();
ОбщиеСоответствия.Вставить("ПланСчетов.Управленческий", СоответствияПланСчетов());
ОбщиеСоответствия.Вставить("Справочник.Валюты", СоответствияВалюты());
ОбщиеСоответствия.Вставить("Справочник.СтраныМира", СоответствияСтраныМира());  
ОбщиеСоответствия.Вставить("Справочник.ОрганизационноПравовыеФормы", СоответствияОПФ());
ОбщиеСоответствия.Вставить("Справочник.НазначенияОбъектовНедвижимости", НазначенияОбъектовНедвижимости()); 
ОбщиеСоответствия.Вставить("Справочник.ВидыНедвижимости", ВидыНедвижимости());         
ОбщиеСоответствия.Вставить("Справочник.ВидыДокументовФизическихЛиц", ВидыДокументовФизическихЛиц());

Возврат ОбщиеСоответствия;

	
КонецФункции

Функция ЗагружатьПоПортфелю(Портфель)
	
	Поиск = Новый Структура;
	Поиск.Вставить("Портфель",  Портфель); 
	Поиск.Вставить("Загружать",  Истина);
	
	Загружать = ОтборПортфелей.Количество() > 0 И ОтборПортфелей.НайтиСтроки(Поиск).Количество() > 0;
	
	Возврат Загружать;
	
КонецФункции

Процедура ОбработатьВводПрочихДанных(Данные)   
	
	ПлановыеДатыПереоценки = ВидыОперацийВводаОстатковРучнымиОперациями.ПлановыеДатыПереоценки;

	ДанныеТаблица = Данные.ПлановыеДатыПереоценки;
	Дата = Данные.Дата;
	
	ДокументыПоПортфелям = Новый Соответствие();
	
	
	Для Каждого СтрокаДанных Из ДанныеТаблица Цикл    
		
		ПортфельСсылка = ПолучитьСсылкуНаОбъект(СтрокаДанных.Портфель.Ссылка, Справочники.Портфели); 

		Если Не ЗагружатьПоПортфелю(ПортфельСсылка) Тогда
			Продолжить;
		КонецЕсли;

		АктивСсылка = ПолучитьСсылкуНаОбъект(СтрокаДанных.Актив.Ссылка, Справочники.Активы); 
		Партия = ПолучитьЗначениеОбъекта(СтрокаДанных.Партия, СтрокаДанных.Свойства().Получить("Партия").Тип.Имя);      
		
		Если ДокументыПоПортфелям.Получить(ПортфельСсылка) = Неопределено Тогда  
			ДокументОперации = ПолучитьСоздатьДокументРучнойОперации(ПортфельСсылка, ПлановыеДатыПереоценки);      			
			ДокументОперации.Дата = Дата;
			ДокументОперации.Записать();
			
			ДокументыПоПортфелям[ПортфельСсылка] = ДокументОперации;

		КонецЕсли;
		
		ДокументОперации = ДокументыПоПортфелям[ПортфельСсылка];
			
        Движения = ДокументОперации.Движения.ПлановыеДатыПереоценки; 
		
		Движение = Движения.Добавить();
		
		Движение.Актив = АктивСсылка;
		Движение.Период = Дата;  
		Движение.Портфель = ПортфельСсылка;
		Движение.Партия = Партия;          
		
		Движение.ДатаОценки = СтрокаДанных.ДатаОценки;
		Движение.ПлановаяДатаПереоценки = СтрокаДанных.ПлановаяДатаПереоценки; 	
		
	КонецЦикла;                                                                
	
	Для Каждого КлючЗначение Из ДокументыПоПортфелям Цикл
		
		ДокументОбъект = КлючЗначение.Значение;
		
		Движения = ДокументОбъект.Движения.ПлановыеДатыПереоценки; 
 
		 
		Движения.Записывать = Истина;
		Движения.Записать();
		
	КонецЦикла;
	
КонецПроцедуры
                                                  
Процедура ОбработатьВводДанныхРегистрацияЗемельныхУчастков(Данные)  
	
	Для Каждого СтрокаДанныхСписка Из РаботаСXDTO.ОбъектыСписка(Данные) Цикл   
		
		Для Каждого СтрокаДанных Из СтрокаДанныхСписка.Данные Цикл 
			
			Запись = РегистрыСведений.РегистрацияЗемельныхУчастков.СоздатьМенеджерЗаписи();
			
			Для Каждого Свойство Из СтрокаДанных.Свойства() Цикл 			
				
				Значение = ПолучитьЗначениеОбъекта(СтрокаДанных[Свойство.Имя], Свойство.Тип.Имя);       
				
				Запись[Свойство.Имя] = Значение;      
				
				Запись.Период = ТекущаяДатаСеанса();
				
			КонецЦикла;
			
			
		   Запись.Записать(Истина);
		
		КонецЦикла;	
		
	КонецЦикла;
	
КонецПроцедуры


Процедура ОбработатьВводНачальныхОстатковПоНалогам(Данные)  
		
	Для Каждого СтрокаДанных Из РаботаСXDTO.ОбъектыСписка(Данные) Цикл      
		
		Период = СтрокаДанных.Дата;
		
		НДС =  СтрокаДанных.Налоги.НДС;
		НФДЛ =  СтрокаДанных.Налоги.НДФЛ;
		НалогНаЗемлю =  СтрокаДанных.Налоги.НалогНаЗемлю;
		НалогНаИмущество =  СтрокаДанных.Налоги.НалогНаИмущество;      
		
		ВводОстатковПоНалогам_НДС = ВидыОперацийВводаОстатковРучнымиОперациями.ВводОстатковПоНалогам_НДС; 
		ВводОстатковПоНалогам_НДФЛ = ВидыОперацийВводаОстатковРучнымиОперациями.ВводОстатковПоНалогам_НДФЛ; 
		ВводОстатковПоНалогам_ЗемельныйНалог = ВидыОперацийВводаОстатковРучнымиОперациями.ВводОстатковПоНалогам_ЗемельныйНалог; 
		ВводОстатковПоНалогам_НалогНаИмущество = ВидыОперацийВводаОстатковРучнымиОперациями.ВводОстатковПоНалогам_НалогНаИмущество; 
		
		
			
		
		Для Каждого ЗаписьXDTO Из РаботаСXDTO.ОбъектыСписка(НДС) Цикл                                       
			
			ПортфельСсылка = ПолучитьСсылкуНаОбъект(ЗаписьXDTO.Портфель.Ссылка, Справочники.Портфели);
			
			Если Не ЗагружатьПоПортфелю(ПортфельСсылка) Тогда
				Продолжить;
			КонецЕсли;

			ВидПлатежаВГосБюджет = ПолучитьЗначениеОбъекта(ЗаписьXDTO.ВидПлатежаВГосБюджет, ЗаписьXDTO.Свойства().Получить("ВидПлатежаВГосБюджет").Тип.Имя);
			
			ДокументОбъект = ПолучитьСоздатьДокументРучнойОперации(ПортфельСсылка, ВводОстатковПоНалогам_НДС);			
			ДокументОбъект.Дата = Период;
			ДокументОбъект.Записать();			
			
			Движения = ДокументОбъект.Движения.Управленческий;  		
			
			
			СчетНДС = ПланыСчетов.Управленческий.НДС;
			СчетВспомогательный = ПланыСчетов.Управленческий.Вспомогательный;  		
			
			Проводка = Движения.Добавить();
			Проводка.Портфель	= ПортфельСсылка;
			Проводка.Период		= Период;			
			Проводка.Регистратор = ДокументОбъект.Ссылка;			
			Проводка.Содержание	= "Ввод остатков по НДС";
			
			Если ЗначениеЗаполнено(ЗаписьXDTO.СуммаКт) Тогда			
				Проводка.СчетДт		= СчетВспомогательный;
				Проводка.СчетКт		= СчетНДС;  
				Сумма = ЗаписьXDTO.СуммаКт;   
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ВидПлатежаВГосБюджет);

			Иначе
				Проводка.СчетДт		= СчетНДС;
				Проводка.СчетКт		= СчетВспомогательный;	
				Сумма = ЗаписьXDTO.СуммаДт;   
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, ВидПлатежаВГосБюджет);

			КонецЕсли;
			
			
			Проводка.Сумма      = Сумма;  		
			
			Движения.Записывать = Истина;
			Движения.Записать();	
			
		КонецЦикла; 
		
		Для Каждого ЗаписьXDTO Из РаботаСXDTO.ОбъектыСписка(НалогНаЗемлю) Цикл                                       
			
			ПортфельСсылка = ПолучитьСсылкуНаОбъект(ЗаписьXDTO.Портфель.Ссылка, Справочники.Портфели); 	
			
			Если Не ЗагружатьПоПортфелю(ПортфельСсылка) Тогда
				Продолжить;
			КонецЕсли;

			//todo
			РегистрацииВНалоговомОргане = ПолучитьЗначениеОбъекта(ЗаписьXDTO.РегистрацииВНалоговомОргане, ЗаписьXDTO.Свойства().Получить("РегистрацииВНалоговомОргане").Тип.Имя); 
			Актив = ПолучитьЗначениеОбъекта(ЗаписьXDTO.Актив, ЗаписьXDTO.Свойства().Получить("Актив").Тип.Имя);
			
			ДокументОбъект = ПолучитьСоздатьДокументРучнойОперации(ПортфельСсылка, ВводОстатковПоНалогам_ЗемельныйНалог);			
			ДокументОбъект.Дата = Период;
			ДокументОбъект.Записать();			
			
			Движения = ДокументОбъект.Движения.Управленческий;  
			
			СчетНДС = ПланыСчетов.Управленческий.НалогНаЗемлю;
			СчетВспомогательный = ПланыСчетов.Управленческий.Вспомогательный;  		
			
			Проводка = Движения.Добавить();
			Проводка.Портфель	= ПортфельСсылка;
			Проводка.Период		= Период;			
			Проводка.Регистратор = ДокументОбъект.Ссылка;			
			Проводка.Содержание	= "Ввод остатков по налогу на землю";
			
			Если ЗначениеЗаполнено(ЗаписьXDTO.СуммаКт) Тогда			
				Проводка.СчетДт		= СчетВспомогательный;
				Проводка.СчетКт		= СчетНДС;  
				Сумма = ЗаписьXDTO.СуммаКт;   
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Актив);
				//БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Контрагент);


			Иначе
				Проводка.СчетДт		= СчетНДС;
				Проводка.СчетКт		= СчетВспомогательный;	
				Сумма = ЗаписьXDTO.СуммаДт;   
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Актив);
				//БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, Контрагент);

			КонецЕсли;
			
			
			Проводка.Сумма      = Сумма;  		
			
			Движения.Записывать = Истина;
			Движения.Записать();	
			
		КонецЦикла;  
		
			
		Для Каждого ЗаписьXDTO Из РаботаСXDTO.ОбъектыСписка(НалогНаИмущество) Цикл                                       
			
			ПортфельСсылка = ПолучитьСсылкуНаОбъект(ЗаписьXDTO.Портфель.Ссылка, Справочники.Портфели); 		
			
			Если Не ЗагружатьПоПортфелю(ПортфельСсылка) Тогда
				Продолжить;
			КонецЕсли;

			Контрагент = ПолучитьЗначениеОбъекта(ЗаписьXDTO.Контрагент, ЗаписьXDTO.Свойства().Получить("Контрагент").Тип.Имя); 
			Актив = ПолучитьЗначениеОбъекта(ЗаписьXDTO.Актив, ЗаписьXDTO.Свойства().Получить("Актив").Тип.Имя);
			
			ДокументОбъект = ПолучитьСоздатьДокументРучнойОперации(ПортфельСсылка, ВводОстатковПоНалогам_НалогНаИмущество);			
			ДокументОбъект.Дата = Период;                                
			ДокументОбъект.Содержание	= "Ввод остатков по налогу на имущество";
			ДокументОбъект.Записать();			
			
			Движения = ДокументОбъект.Движения.Управленческий;  
			
			СчетНДС = ПланыСчетов.Управленческий.НалогНаИмущество;
			СчетВспомогательный = ПланыСчетов.Управленческий.Вспомогательный;  		
			
			Проводка = Движения.Добавить();
			Проводка.Портфель	= ПортфельСсылка;
			Проводка.Период		= Период;			
			Проводка.Регистратор = ДокументОбъект.Ссылка;			
			Проводка.Содержание	= "Ввод остатков по налогу на имущество";
			
			Если ЗначениеЗаполнено(ЗаписьXDTO.СуммаКт) Тогда			
				Проводка.СчетДт		= СчетВспомогательный;
				Проводка.СчетКт		= СчетНДС;  
				Сумма = ЗаписьXDTO.СуммаКт;   
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, Актив);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Контрагент);


			Иначе
				Проводка.СчетДт		= СчетНДС;
				Проводка.СчетКт		= СчетВспомогательный;	
				Сумма = ЗаписьXDTO.СуммаДт;   
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, Актив);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Контрагент);

			КонецЕсли;
			
			
			Проводка.Сумма      = Сумма;  		
			
			Движения.Записывать = Истина;
			Движения.Записать();	
			
		КонецЦикла;   	
				
		
	КонецЦикла;  	                               
	
КонецПроцедуры

Процедура ОбработатьВводНачальныхОстатковПоПайщикам(Данные)  
	
	Для Каждого СтрокаДанных Из РаботаСXDTO.ОбъектыСписка(Данные) Цикл
		
		ПортфельСсылка = ПолучитьСсылкуНаОбъект(СтрокаДанных.Портфель.Ссылка, Справочники.Портфели);	                    
		
		Если Не ЗагружатьПоПортфелю(ПортфельСсылка) Тогда
				Продолжить;
			КонецЕсли;

		ВидОперации = ПолучитьЗначениеОбъекта(СтрокаДанных.ВидОперации, СтрокаДанных.Свойства().Получить("ВидОперации").Тип.Имя);
              		
		Отбор = Новый Структура("Портфель, ВидОперации", ПортфельСсылка, ВидОперации);  			
		ДокументОбъект = СуществующийИлиНовыйДокументВводаОстатков(Тип("ДокументСсылка.ВводНачальныхОстатковПоПайщикам"), Отбор);
  		
		
		ДокументОбъект.Портфель = ПортфельСсылка;
		ДокументОбъект.Дата =  СтрокаДанных.Дата;
		
		ДокументОбъект.ВидОперации = ВидОперации;
		
		ДокументОбъект.Комментарий = КомментарийДокументовОстатков;
		
		ТаблицаДанныеСписокПайщиковXDTO = РаботаСXDTO.ОбъектыСписка(СтрокаДанных.СписокПайщиков);		
		ЗаполнитьТаблицуДокументаОстатков(ДокументОбъект.СписокПайщиков, ТаблицаДанныеСписокПайщиковXDTO); 
			
		ЗаписатьДокументОстатков(ДокументОбъект); 			
		
	КонецЦикла;  	                               
	
КонецПроцедуры

Процедура ОбработатьВводНачальныхОстатковПоДенежнымТребованиям(Данные) 
	
	Для Каждого СтрокаДанных Из РаботаСXDTO.ОбъектыСписка(Данные) Цикл
		
		ПортфельСсылка = ПолучитьСсылкуНаОбъект(СтрокаДанных.Портфель.Ссылка, Справочники.Портфели);                        
		
		Если Не ЗагружатьПоПортфелю(ПортфельСсылка) Тогда
				Продолжить;
		КонецЕсли;

			
		МестоХранения = ПолучитьЗначениеОбъекта(СтрокаДанных.МестоХранения, СтрокаДанных.Свойства().Получить("МестоХранения").Тип.Имя);	
		Партия = ПолучитьЗначениеОбъекта(СтрокаДанных.МестоХранения, СтрокаДанных.Свойства().Получить("Партия").Тип.Имя);
		Раздел = ПолучитьЗначениеОбъекта(СтрокаДанных.МестоХранения, СтрокаДанных.Свойства().Получить("Раздел").Тип.Имя);
			
		Отбор = Новый Структура("Портфель", ПортфельСсылка);  			
		ДокументОбъект = СуществующийИлиНовыйДокументВводаОстатков(Тип("ДокументСсылка.ВводНачальныхОстатковПоДенежнымТребованиям"), Отбор);
		
		
		ДокументОбъект.Портфель = ПортфельСсылка;
		ДокументОбъект.Дата =  СтрокаДанных.Дата;
		
		ДокументОбъект.МестоХранения = МестоХранения;
		ДокументОбъект.Партия = Партия;
		ДокументОбъект.Раздел = Раздел;
		
		ДокументОбъект.Комментарий = КомментарийДокументовОстатков;
		
		ТаблицаДанныеАктивыXDTO = РаботаСXDTO.ОбъектыСписка(СтрокаДанных.Активы);		
		ЗаполнитьТаблицуДокументаОстатков(ДокументОбъект.Активы, ТаблицаДанныеАктивыXDTO); 
		
		ТаблицаДанныеЗаймыПолученныеXDTO = РаботаСXDTO.ОбъектыСписка(СтрокаДанных.ЗаймыПолученные);		
		ЗаполнитьТаблицуДокументаОстатков(ДокументОбъект.ЗаймыПолученные, ТаблицаДанныеЗаймыПолученныеXDTO); 
		
		ТаблицаДанныеВзаиморасчетыXDTO = РаботаСXDTO.ОбъектыСписка(СтрокаДанных.Взаиморасчеты);		
		ЗаполнитьТаблицуДокументаОстатков(ДокументОбъект.Взаиморасчеты, ТаблицаДанныеВзаиморасчетыXDTO); 
		
		ЗаписатьДокументОстатков(ДокументОбъект); 	
		
		
	КонецЦикла;  	                               
	
КонецПроцедуры

Процедура ОбработатьВводНачальныхОстатковПоНДС(Данные) 
	
	Для Каждого СтрокаДанных Из РаботаСXDTO.ОбъектыСписка(Данные) Цикл
		
		ПортфельСсылка = ПолучитьСсылкуНаОбъект(СтрокаДанных.Портфель.Ссылка, Справочники.Портфели);   
		
		Если Не ЗагружатьПоПортфелю(ПортфельСсылка) Тогда
				Продолжить;
			КонецЕсли;

		РазделУчета = ПолучитьЗначениеОбъекта(СтрокаДанных.РазделУчета, СтрокаДанных.Свойства().Получить("РазделУчета").Тип.Имя);

			
		Отбор = Новый Структура("Портфель, РазделУчета", ПортфельСсылка, РазделУчета);  			
		ДокументОбъект = СуществующийИлиНовыйДокументВводаОстатков(Тип("ДокументСсылка.ВводНачальныхОстатковНДС"), Отбор);	
		
		ДокументОбъект.Портфель = ПортфельСсылка;
		ДокументОбъект.Дата =  СтрокаДанных.Дата;
		//ДокументОбъект.ВидОперации = ВидОперации;                  
		ДокументОбъект.РазделУчета = РазделУчета;
		
		ДокументОбъект.Комментарий = КомментарийДокументовОстатков;
		
		ТаблицаДанныеПоНДСXDTO = РаботаСXDTO.ОбъектыСписка(СтрокаДанных.ДанныеПоНДС);
		
		ЗаполнитьТаблицуДокументаОстатков(ДокументОбъект.ДанныеПоНДС, ТаблицаДанныеПоНДСXDTO); 
		
		ЗаписатьДокументОстатков(ДокументОбъект); 	
		
		
	КонецЦикла;  	                               
	
КонецПроцедуры


Процедура ОбработатьВводНачальныхОстатковПоВзаиморасчетам(Данные) 
	
   	Для Каждого СтрокаДанных Из РаботаСXDTO.ОбъектыСписка(Данные) Цикл
		
		ПортфельСсылка = ПолучитьСсылкуНаОбъект(СтрокаДанных.Портфель.Ссылка, Справочники.Портфели); 
		
		Если Не ЗагружатьПоПортфелю(ПортфельСсылка) Тогда
			Продолжить;
		КонецЕсли;

		ВидЗадолженности = СтрокаДанных.ВидЗадолженности;
		
		Отбор = Новый Структура("Портфель, ВидЗадолженности", ПортфельСсылка, ВидЗадолженности);  			
		ДокументОбъект = СуществующийИлиНовыйДокументВводаОстатков(Тип("ДокументСсылка.ВводНачальныхОстатковПоЗадолженности"), Отбор);	  
		
		ДокументОбъект.Портфель = ПортфельСсылка;
		ДокументОбъект.Дата =  СтрокаДанных.Дата;
		ДокументОбъект.ВидЗадолженности = ВидЗадолженности;
		ДокументОбъект.Комментарий = КомментарийДокументовОстатков;
		
		ТаблицаВзаиморасчетыXDTO = РаботаСXDTO.ОбъектыСписка(СтрокаДанных.Взаиморасчеты);
		
		ЗаполнитьТаблицуДокументаОстатков(ДокументОбъект.Взаиморасчеты, ТаблицаВзаиморасчетыXDTO); 
		
		ЗаписатьДокументОстатков(ДокументОбъект); 		
		
	КонецЦикла;  	                               
	
КонецПроцедуры

Процедура ОбработатьВводНачальныхОстатковПоИмуществу(Данные)      
	
	Для Каждого СтрокаДанных Из РаботаСXDTO.ОбъектыСписка(Данные) Цикл
			
		ПортфельСсылка = ПолучитьСсылкуНаОбъект(СтрокаДанных.Портфель.Ссылка, Справочники.Портфели);     
		
		Если Не ЗагружатьПоПортфелю(ПортфельСсылка) Тогда
			Продолжить;
		КонецЕсли;
		
		ВидОперации = ?(ЗначениеЗаполнено(СтрокаДанных.ВидОперации), СтрокаДанных.ВидОперации, "Недвижимость"); 
		
		Отбор = Новый Структура("Портфель, ВидОперации", ПортфельСсылка, ВидОперации);  			
		ДокументОбъект = СуществующийИлиНовыйДокументВводаОстатков(Тип("ДокументСсылка.ВводНачальныхОстатковПоИмуществу"), Отбор);		
					
		ДокументОбъект.Портфель = ПортфельСсылка;
		ДокументОбъект.Дата =  СтрокаДанных.Дата;
		ДокументОбъект.ВидОперации = ВидОперации;
		ДокументОбъект.Комментарий = КомментарийДокументовОстатков;
		
		ТаблицаАктивыXDTO = РаботаСXDTO.ОбъектыСписка(СтрокаДанных.Активы);
		
		ЗаполнитьТаблицуДокументаОстатков(ДокументОбъект.Активы, ТаблицаАктивыXDTO); 
		
		ЗаписатьДокументОстатков(ДокументОбъект); 		
		
	КонецЦикла;  	                               
	
КонецПроцедуры  

Процедура ОбработатьВводНачальныхОстатковПоДенежнымСредствам(Данные) 
	
	Для Каждого СтрокаДанных Из РаботаСXDTO.ОбъектыСписка(Данные) Цикл  	
		
		ПортфельСсылка = ПолучитьСсылкуНаОбъект(СтрокаДанных.Портфель.Ссылка, Справочники.Портфели);  
		
		Если Не ЗагружатьПоПортфелю(ПортфельСсылка) Тогда
			Продолжить;
		КонецЕсли;

		
		Отбор = Новый Структура("Портфель", ПортфельСсылка);  			
		ДокументОбъект = СуществующийИлиНовыйДокументВводаОстатков(Тип("ДокументСсылка.ВводНачальныхОстатковПоДенежнымСредствам"), Отбор);	
		
		ДокументОбъект.Портфель = ПортфельСсылка;
		ДокументОбъект.Дата = СтрокаДанных.Дата;
		ДокументОбъект.Комментарий = КомментарийДокументовОстатков;    
		
		ТаблицаДенежныеСредстваXDTO = РаботаСXDTO.ОбъектыСписка(СтрокаДанных.ДенежныеСредства);  
		ЗаполнитьТаблицуДокументаОстатков(ДокументОбъект.ДенежныеСредства, ТаблицаДенежныеСредстваXDTO);   
		ЗаписатьДокументОстатков(ДокументОбъект); 	
		
	КонецЦикла;  	                               
	
КонецПроцедуры  

Функция СуществующийИлиНовыйДокументВводаОстатков(ТипДокумента, Отбор)
	
		ТаблицаДокументовПТипу = КэшДокументовОстатков[ТипДокумента];
	
	Если ТаблицаДокументовПТипу = Неопределено Или ТаблицаДокументовПТипу.Количество() = 0 Тогда
		ДокументСсылка =  Новый(ТипДокумента); 		
		ДокументОбъект = Документы[ДокументСсылка.Метаданные().Имя].СоздатьДокумент();
 
	Иначе
		
		НайденныеСтроки = ТаблицаДокументовПТипу.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() = 1 Тогда
			ДокументОбъект =  НайденныеСтроки[0].Ссылка.ПолучитьОбъект(); 
		ИначеЕсли  НайденныеСтроки.Количество() = 0 Тогда      
			ДокументСсылка =  Новый(ТипДокумента); 		
			ДокументОбъект = Документы[ДокументСсылка.Метаданные().Имя].СоздатьДокумент();
		Иначе
			ВызватьИсключение(ТипДокумента);		
		КонецЕсли; 

	КонецЕсли;
	
	
	Возврат ДокументОбъект;
	
КонецФункции

Функция СоответствияПланСчетов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Управленческий.Код КАК Код,
	|	Управленческий.Ссылка КАК Ссылка
	|ИЗ
	|	ПланСчетов.Управленческий КАК Управленческий
	|ГДЕ
	|	НЕ Управленческий.ПометкаУдаления
	|	И НЕ Управленческий.ЗапретитьИспользоватьВПроводках";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();     
	
	СоответствиеПоКоду = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
	
		СоответствиеПоКоду.Вставить(Выборка.Код, Выборка.Ссылка);
	
	КонецЦикла;      
	
	//Дополнительные соответствия
	СоответствиеПоКоду.Вставить("76.99", ПланыСчетов.Управленческий.ЗадолженностьПоПрочимРасчетам);
	СоответствиеПоКоду.Вставить("76.02", ПланыСчетов.Управленческий.РасчетыСпецДеп);
	СоответствиеПоКоду.Вставить("76.12.1", ПланыСчетов.Управленческий.РасчетыПоАрендеЗадолженность);
	
	СоответствиеПоКоду.Вставить("76.20.2", ПланыСчетов.Управленческий.НачисленныеПроцентыПоДепозитнымСчетам);
	СоответствиеПоКоду.Вставить("76.20.8", ПланыСчетов.Управленческий.НачисленныеПроцентыПоСделкамМНО);      
	СоответствиеПоКоду.Вставить("76.06.3", ПланыСчетов.Управленческий.РасчетыПоНачислениюДоходов);
	СоответствиеПоКоду.Вставить("76.12.3", ПланыСчетов.Управленческий.РасчетыПоОбеспечению);
	
	СоответствиеПоКоду.Вставить("55.03", ПланыСчетов.Управленческий.ДепозитныеСчета);
	СоответствиеПоКоду.Вставить("55.23", ПланыСчетов.Управленческий.ДепозитныеСчетаВал);
	
	СоответствиеПоКоду.Вставить("66.01", ПланыСчетов.Управленческий.ОсновнойДолгЗаймаПолученного);
	СоответствиеПоКоду.Вставить("66.03", ПланыСчетов.Управленческий.ЗаймыВыданныеКраткосрочные);
	
	Возврат СоответствиеПоКоду; 
	
КонецФункции

Функция СоответствияВалюты()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Валюты.Код КАК Код,
	|	Валюты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Валюты КАК Валюты
	|ГДЕ
	|	НЕ Валюты.ПометкаУдаления";
	
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();      
	
	СоответтсвиеПоКоду = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		
		СоответтсвиеПоКоду.Вставить(Выборка.Код, Выборка.Ссылка);	
		
	КонецЦикла;  
	
	Возврат СоответтсвиеПоКоду;
	
КонецФункции 

Функция СоответствияСтраныМира()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтраныМира.Код КАК Код,
	               |	СтраныМира.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.СтраныМира КАК СтраныМира
	               |ГДЕ
	               |	НЕ СтраныМира.ПометкаУдаления";
	
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();      
	
	СоответтсвиеПоКоду = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		
		СоответтсвиеПоКоду.Вставить(Выборка.Код, Выборка.Ссылка);	
		
	КонецЦикла;  
	
	Возврат СоответтсвиеПоКоду;
	
КонецФункции   


Функция СоответствияОПФ()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОрганизационноПравовыеФормы.Код КАК Код,
	               |	ОрганизационноПравовыеФормы.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ОрганизационноПравовыеФормы КАК ОрганизационноПравовыеФормы
	               |ГДЕ
	               |	НЕ ОрганизационноПравовыеФормы.ПометкаУдаления";
	
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();      
	
	СоответтсвиеПоКоду = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		
		СоответтсвиеПоКоду.Вставить(Выборка.Код, Выборка.Ссылка);	
		
	КонецЦикла;  
	
	Возврат СоответтсвиеПоКоду;
	
КонецФункции  

Функция НазначенияОбъектовНедвижимости()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НазначенияОбъектовНедвижимости.НаименованиеПолное КАК КлючПоиска,
	               |	НазначенияОбъектовНедвижимости.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.НазначенияОбъектовНедвижимости КАК НазначенияОбъектовНедвижимости
	               |ГДЕ
	               |	НЕ НазначенияОбъектовНедвижимости.ПометкаУдаления";
	
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();      
	
	СоответтсвиеПоКоду = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		
		СоответтсвиеПоКоду.Вставить(Выборка.КлючПоиска, Выборка.Ссылка);	
		
	КонецЦикла;  
	
	Возврат СоответтсвиеПоКоду;
	
КонецФункции  

Функция ВидыНедвижимости()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВидыНедвижимости.Наименование КАК Код,
	               |	ВидыНедвижимости.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ВидыНедвижимости КАК ВидыНедвижимости
	               |ГДЕ
	               |	НЕ ВидыНедвижимости.ПометкаУдаления";
	
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();      
	
	СоответтсвиеПоКоду = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		
		СоответтсвиеПоКоду.Вставить(Выборка.Код, Выборка.Ссылка);	
		
	КонецЦикла;  
	
	Возврат СоответтсвиеПоКоду;
	
КонецФункции     

Функция ВидыДокументовФизическихЛиц()     
	
		Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВидыДокументовФизическихЛиц.Ссылка КАК Ссылка,
	               |	ВидыДокументовФизическихЛиц.ИмяПредопределенныхДанных КАК Код
	               |ИЗ
	               |	Справочник.ВидыДокументовФизическихЛиц КАК ВидыДокументовФизическихЛиц
	               |ГДЕ
	               |	НЕ ВидыДокументовФизическихЛиц.ПометкаУдаления";
	
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();      
	
	СоответтсвиеПоКоду = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		
		СоответтсвиеПоКоду.Вставить(Выборка.Код, Выборка.Ссылка);	
		
	КонецЦикла;  
	
	Возврат СоответтсвиеПоКоду;

	
КонецФункции

    

Процедура ЗагрузитьПериодическиеСведения(ОбъектДанных, ОбъектXDTO, ИмяТипа)   
	
	Если Не РаботаСXDTO.ЕстьСвойствоXDTO(ОбъектXDTO, "ПериодическиеСведения") Тогда
		Возврат;
	КонецЕсли;              
	
		СвойстваПериодическиеСведения = ОбъектXDTO.ПериодическиеСведения.Свойства();

	
	Если ИмяТипа = "Справочник.Контрагенты" Тогда      
		
			
		
		ПаспортныеДанныеXDTO = СвойстваПериодическиеСведения.Получить("ПаспортныеДанные");
		ГражданствоXDTO		 = СвойстваПериодическиеСведения.Получить("Гражданство");
		ФИОXDTO				 = СвойстваПериодическиеСведения.Получить("ФИО");
		
		Если ПаспортныеДанныеXDTO <> Неопределено Тогда
								
			НоваяСтрока = ТаблицаПериодическихДанныхДокументовУдостоверяющихЛичность.Добавить();
			
			Для каждого ЗаписьXDTO Из ОбъектXDTO.ПериодическиеСведения.ПаспортныеДанные Цикл  
				
				ВидДокумента = ПолучитьЗначениеОбъекта(ЗаписьXDTO.ВидыДокументовФизическихЛиц, "Справочник.ВидыДокументовФизическихЛиц");  
				
				Если Не ЗначениеЗаполнено(ВидДокумента) Тогда
					
					Сообщить(СтрШаблон("У %1 неопределен вид документа удостоверяющего личность", ОбъектДанных.ФизическоеЛицо));   
					
					Продолжить;
					
				КонецЕсли;
				

				
				НоваяСтрока.Период = ЗаписьXDTO.Период;
				НоваяСтрока.ВидДокумента = ПолучитьЗначениеОбъекта(ЗаписьXDTO.ВидыДокументовФизическихЛиц, "Справочник.ВидыДокументовФизическихЛиц");
				НоваяСтрока.ДатаВыдачи = ЗаписьXDTO.ДатаВыдачи;
				НоваяСтрока.КемВыдан = ЗаписьXDTO.КемВыдан;
				НоваяСтрока.КодПодразделения = ЗаписьXDTO.КодПодразделения;
				НоваяСтрока.Номер = ЗаписьXDTO.Номер;
				НоваяСтрока.Серия = ЗаписьXDTO.Серия;
				НоваяСтрока.Представление = ЗаписьXDTO.Представление;
				НоваяСтрока.СрокДействия = ЗаписьXDTO.СрокДействия;         
				НоваяСтрока.Физлицо = ОбъектДанных.ФизическоеЛицо;  
				НоваяСтрока.Контрагент = ОбъектДанных.Ссылка;
				
			КонецЦикла;      
			
			//todo добавить проверку
			//МенеджерЗаписи.Записать(Истина); 
			
		КонецЕсли;        
		
		Если ГражданствоXDTO <> Неопределено Тогда 	
			
			НоваяСтрока = ТаблицаПериодическихДанныхГражданства.Добавить();
						
			Для каждого ЗаписьXDTO Из ОбъектXDTO.ПериодическиеСведения.Гражданство Цикл
				
				НоваяСтрока.Период = ЗаписьXDTO.Период;
				НоваяСтрока.Страна = ПолучитьЗначениеОбъекта(ЗаписьXDTO.Страна, "Справочник.СтраныМира");				
				НоваяСтрока.ФизическоеЛицо = ОбъектДанных.ФизическоеЛицо; 
				НоваяСтрока.Контрагент = ОбъектДанных.ФизическоеЛицо;

				
			КонецЦикла;      
					
		КонецЕсли;     
		
		Если ФИОXDTO <> Неопределено Тогда 	
			
			НоваяСтрока = ТаблицаПериодическихДанныхФИО.Добавить();		
			
			Для каждого ЗаписьXDTO Из ОбъектXDTO.ПериодическиеСведения.ФИО Цикл
				
				НоваяСтрока.Период = ЗаписьXDTO.Период;
				НоваяСтрока.Фамилия = ЗаписьXDTO.Фамилия;			
				НоваяСтрока.Имя = ЗаписьXDTO.Имя;			
				НоваяСтрока.Отчество = ЗаписьXDTO.Отчество;						
				НоваяСтрока.ФизическоеЛицо = ОбъектДанных.ФизическоеЛицо; 
				НоваяСтрока.Контрагент = ОбъектДанных.ФизическоеЛицо;

				
			КонецЦикла;      
				
		КонецЕсли;


	ИначеЕсли ИмяТипа = "Справочник.Недвижимость" Тогда
		
		//В доп. параметрах есть ссылка на актив, так как для записи в регистр истории требуется ссылка
		//на актив, а не на конкретный тип актива
		АктивСсылка = ПолучитьСсылкуНаОбъект(ОбъектXDTO.ДополнительныеПараметры.Актив.Ссылка, Справочники.Активы);
		
		//Отдельные даанные по недвижимости могут быть на разные даты, например запись по адресу на 01.02, а 
		//виду недвижимости на 03.03. Что бы не плоодить лишние строки в таблице - действуем через соответтсвия,
		//для определения одной строки таблицы на один период
		
		ДатыСведений = Новый Соответствие;	
		
		Для Каждого  СвойствоПериодРеквизитаXDTO Из СвойстваПериодическиеСведения Цикл
			
			ОписаниеПериодическихЗначений = ОбъектXDTO.ПериодическиеСведения[СвойствоПериодРеквизитаXDTO.Имя];   
				
			Для Каждого Значение Из ОписаниеПериодическихЗначений Цикл     
				
				СтрокаТаблицыПоПериоду = ДатыСведений[Значение.Период];
				
				Если СтрокаТаблицыПоПериоду = Неопределено Тогда
					
					СтрокаТаблицыПоПериоду = ТаблицаПериодическихДанныхНедвижимости.Добавить();  
					СтрокаТаблицыПоПериоду.Актив = АктивСсылка; 
					СтрокаТаблицыПоПериоду.Период = Значение.Период;

					
					ДатыСведений[Значение.Период] = СтрокаТаблицыПоПериоду;
	
					
				КонецЕсли;
								
				Если ТипЗнч(Значение.Значение) = Тип("ОбъектXDTO") Тогда
					ЗначениеПоОбъектуXDTO = ПолучитьЗначениеОбъекта(Значение.Значение, Значение.Значение.Тип().Имя);
				Иначе
					ЗначениеПоОбъектуXDTO = Значение.Значение;
				КонецЕсли;			
				
				СтрокаТаблицыПоПериоду[СвойствоПериодРеквизитаXDTO.Имя] = ЗначениеПоОбъектуXDTO; 
				
			КонецЦикла;
			
		КонецЦикла;           		
		
		
	КонецЕсли;
	     	
КонецПроцедуры     

Процедура ЗагрузитьРеквизитыОбъекта(ОбъектДанных, ОбъектXDTO)
	
	РеквизитыОбъекта = ОбъектДанных.Метаданные().Реквизиты;                              
	СтандартныеРеквизиты = ОбъектДанных.Метаданные().СтандартныеРеквизиты;  
	ИменаСтандартныхРеквизитов = Новый Массив;
	
	КоличествоСтандартныхРеквизитов = СтандартныеРеквизиты.Количество();
	
	Для тт = 0 По КоличествоСтандартныхРеквизитов - 1 Цикл				
		ИменаСтандартныхРеквизитов.Добавить(СтандартныеРеквизиты[тт].Имя);
	КонецЦикла;   	
	
	Для Каждого СвойствоРеквизитаXDTO Из ОбъектXDTO.Реквизиты.Свойства() Цикл    
					
		Если РеквизитыОбъекта.Найти(СвойствоРеквизитаXDTO.Имя) = Неопределено И ИменаСтандартныхРеквизитов.Найти(СвойствоРеквизитаXDTO.Имя) = Неопределено Тогда
					
			Сообщить("Для " + ОбъектДанных.Метаданные().Синоним + " не найден реквизит " + СвойствоРеквизитаXDTO.Имя);
			
			Продолжить;
			
		КонецЕсли;          
		
		ЗначениеИзXDTO = ЗначениеИзXDTO(ОбъектXDTO, СвойствоРеквизитаXDTO, ТипЗнч(ОбъектДанных[СвойствоРеквизитаXDTO.Имя]));       
		
		ОбъектДанных[СвойствоРеквизитаXDTO.Имя] = ЗначениеИзXDTO;	
		
	КонецЦикла;		
	
КонецПроцедуры   

Процедура ЗагрузитьТабличныеЧастиОбъекта(ОбъектДанных, ОбъектXDTO)
	
	Если Не РаботаСXDTO.ЕстьСвойствоXDTO(ОбъектXDTO, "ТабличныеЧасти") Тогда 
		Возврат;
	КонецЕсли;
	
	ТабличныеЧастиОбъекта = ОбъектДанных.Метаданные().ТабличныеЧасти;   	
	
	Для Каждого СвойстваТабличнаяЧасть Из ОбъектXDTO.ТабличныеЧасти.Свойства() Цикл     
		
		МетаданныеТабличнаяЧасть = ТабличныеЧастиОбъекта.Найти(СвойстваТабличнаяЧасть.Имя);  
		         	
		Если МетаданныеТабличнаяЧасть = Неопределено Тогда
			ВызватьИсключение(999);
		КонецЕсли;
		
		РеквизитыТаблицы = МетаданныеТабличнаяЧасть.Реквизиты;
		
		ТабличнаяЧастьXDTO = ОбъектXDTO.ТабличныеЧасти[СвойстваТабличнаяЧасть.Имя]; 
		
		Если  ТабличнаяЧастьXDTO.Количество() > 0 Тогда
			
			ВызватьИсключение(878787);
			
		КонецЕсли;
		
		Для каждого оп Из ТабличнаяЧастьXDTO Цикл
			ВызватьИсключение(6666);	
		КонецЦикла;
		
		//Для Каждого СвойствоРеквизитаXDTO Из ТабличнаяЧастьXDTO.Свойства() Цикл 
		//	
		//	Если РеквизитыТаблицы.Найти(СвойствоРеквизитаXDTO.Имя) = Неопределено Тогда
		//		
		//		Сообщить("Для " + ОбъектДанных.Метаданные().Синоним + " Табличной части " + СвойстваТабличнаяЧасть.Имя + "  не найден реквизит " + СвойствоРеквизитаXDTO.Имя);
		//		
		//		Продолжить;
		//		
		//	КонецЕсли;          
		//	
		//	ЗначениеИзXDTO = ЗначениеИзXDTO(ОбъектXDTO, СвойствоРеквизитаXDTO, ТипЗнч(ОбъектДанных[СвойствоРеквизитаXDTO.Имя]));       
		//	
		//	ОбъектДанных[СвойствоРеквизитаXDTO.Имя] = ЗначениеИзXDTO;					
		//	
		//КонецЦикла;
		
	КонецЦикла;
	
	
	
КонецПроцедуры

//Загрузка объекта из объекта XDTO
Функция ОбщаяЗагрузка(ОбъектXDTO, МенеджерОбъекта = Неопределено)  
	                         
		ИмяТипа = ОбъектXDTO.Тип().Имя;
		
		//Определяем менеджер по типу
		МенеджерОбъекта = СоответствияТипов[ИмяТипа];   
		
		Если МенеджерОбъекта = Неопределено Тогда
			ВызватьИсключение(СтрШаблон("Не найдено соответствие объекта метаданных конфигурации для типа XDTO '%1'"), ИмяТипа);
		КонецЕсли;
		
		СсылкаНаОбъект = Неопределено;
		
		//Проверяем: тип переданного объекта XDTO ссылочный или нет
		Если РаботаСXDTO.ЕстьСвойствоXDTO(ОбъектXDTO, "Ссылка") Тогда		
			СсылкаНаОбъект = ПолучитьСсылкуНаОбъект(ОбъектXDTO.Ссылка, МенеджерОбъекта);   
		КонецЕсли;
		
		//Проверяем: создан ли уже объект в БД или ссылка есть, объекта нет
		Если ОбъектСуществуетПоСсылке(СсылкаНаОбъект) Тогда
			ОбъектДанных = СсылкаНаОбъект.ПолучитьОбъект();			
		Иначе                                     
			//Объект не найден, требуется создать, определяем тип ссылки документ или справочник
			Если Найти(Строка(МенеджерОбъекта), "ДокументМенеджер") Тогда			
				ОбъектДанных = МенеджерОбъекта.СоздатьДокумент();	
			Иначе
				ОбъектДанных = МенеджерОбъекта.СоздатьЭлемент();				
			КонецЕсли;   
			
			//Если ссылка была передана - устанавливаем её, ссылки может ине быть, если был
			//передан объект с пустой ссылкой (это объекты которые не имеют соответстия с ПИФ 2 или объекты по
			//которым требется искать существующие в БД объекты,  например предопределенные элементы справочников 
			//(напр. валюты, организационноправвовые фомы))
			Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда			
				ОбъектДанных.УстановитьСсылкуНового(СсылкаНаОбъект);
			КонецЕсли; 
			
		КонецЕсли;       
		
				
		ЗагрузитьРеквизитыОбъекта(ОбъектДанных, ОбъектXDTO);      
		
		ЗагрузитьТабличныеЧастиОбъекта(ОбъектДанных, ОбъектXDTO); 
		
		ПослеЗагрузкиДанныхОбъекта(ОбъектДанных, ОбъектXDTO, ИмяТипа);

		ЗагрузитьПериодическиеСведения(ОбъектДанных, ОбъектXDTO, ИмяТипа); 
  		          
		
		Попытка
			
			ОбъектДанных.ОбменДанными.Загрузка = Истина;
			
			ОбъектДанных.Записать();
			
		Исключение
			
			ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());     
			
			//ТекстОшибки = СтрШаблон("Не удалось записать объект  '%1' на дату '%2' по причине: '%3'", 
			//ДокументОбъект, ДокументОбъект.Дата, ОписаниеОшибки);
			
			Сообщить(ОписаниеОшибки);
		КонецПопытки;  		   
		
				
		Возврат ОбъектДанных;
		
	КонецФункции      
	
Процедура ПослеЗагрузкиДанныхОбъекта(ОбъектДанных, ОбъектXDTO, ИмяТипа)    
	
	Если ИмяТипа = "Справочник.Контрагенты" Тогда      
		
		Если ОбъектДанных.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
			Возврат;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ОбъектДанных.ФизическоеЛицо) Тогда   
			
			ФИО = ОбъектДанных.Наименование; 
			Пока СтрНайти(ФИО, "  ") > 0 Цикл
				ФИО = СтрЗаменить(ФИО, "  ", " ");
			КонецЦикла;
			
			СтруктураФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(ФИО);        
			
			НовыйФЛ = Справочники.ФизическиеЛица.СоздатьЭлемент();  
			
			НовыйФЛ.Наименование = ОбъектДанных.Наименование;
			
			НовыйФЛ.Фамилия 	= СтруктураФИО.Фамилия;
			НовыйФЛ.Имя 		= СтруктураФИО.Имя;
			НовыйФЛ.Отчество 	= СтруктураФИО.Отчество;  
			
			НовыйФЛ.ФИО 	= СтруктураФИО.Фамилия + " " + СтруктураФИО.Имя + " " + СтруктураФИО.Отчество;

						
			НовыйФЛ.ИнициалыИмени = ФизическиеЛицаКлиентСервер.ИнициалыИмени(НовыйФЛ.Имя);
			
			НовыйФЛ.ИНН = ОбъектДанных.ИНН;     
			
			НовыйФЛ.ОбменДанными.Загрузка = Истина;
			НовыйФЛ.Записать();   
			
			ОбъектДанных.ФизическоеЛицо = НовыйФЛ.Ссылка;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗначениеИзXDTO(ОбъектXDTO, СвойствоРеквизитаXDTO, ТипРеквизитаОбъекта) 
	
	ЗначениеРеквизитаXDTO = ОбъектXDTO.Реквизиты[СвойствоРеквизитаXDTO.Имя];
	
	Если ЗначениеРеквизитаXDTO = Неопределено Тогда
		
		//	ВызватьИсключение(12222);
		
	КонецЕсли;
	
	Значение = ПолучитьЗначениеОбъекта(ЗначениеРеквизитаXDTO, СвойствоРеквизитаXDTO.Тип.Имя);
	
	Если Не ЗначениеЗаполнено(Значение) Тогда					
		Значение = ЗначениеПоУмолчанию(ТипРеквизитаОбъекта);					
	КонецЕсли;   					        		 
	
	Возврат Значение;
	
	
КонецФункции

Функция ПолучитьЗначениеОбъекта(ОбъектXDTO, ИмяТипа)
	
	Значение = Неопределено;
	
	Если СтрНачинаетсяС(ИмяТипа, "Перечисление.") Тогда
		Менеджер = СоответствияТипов[ИмяТипа];
		
		Если ОбъектXDTO = Неопределено Тогда 
			Значение = Менеджер.ПустаяСсылка();
		Иначе	
			Значение = Менеджер[ОбъектXDTO];	
		КонецЕсли;
		
	ИначеЕсли СоответствияОбъектыВыбора[ИмяТипа] <> Неопределено Тогда
		
		Значение = ПолучитьЗначениеОрабатываемогоОбъекта(ОбъектXDTO, ИмяТипа);
		
	ИначеЕсли ТипЗнч(ОбъектXDTO) = Тип("ОбъектXDTO") Тогда
		
		Если РаботаСXDTO.ЕстьСвойствоXDTO(ОбъектXDTO, "Ссылка") Тогда     				
			Ид = ОбъектXDTO.Ссылка;                  
			гуид = Новый УникальныйИдентификатор(Ид);
			МенеджерОбъекта = СоответствияТипов[ОбъектXDTO.Тип().Имя];	
			Значение = МенеджерОбъекта.ПолучитьСсылку(гуид);
		Иначе			
			ОписаниеЗначенияВыбора = РаботаСXDTO.ЗначениеВыбора(ОбъектXDTO);	
			Значение = ПолучитьЗначениеОбъекта(ОписаниеЗначенияВыбора.Значение, ИмяТипа); 		
		КонецЕсли;
		
	Иначе
		
		Значение = ОбъектXDTO;	
		
	КонецЕсли;     
	
	Возврат Значение;
	
КонецФункции     

Функция ПолучитьЗначениеОрабатываемогоОбъекта(ОбъектXDTO, ИмяТипа)
	
	Значение = Неопределено;
	
	СоответстияОбъектовПоТипу = ОбщиеСоответствия[ИмяТипа];
		
	Если ИмяТипа = "Справочник.Валюты" Тогда  		
		Менеджер = Справочники.Валюты;		
		Значение =    ПолучитьСоздатьОбъект(ОбъектXDTO, Менеджер, "Код", СоответстияОбъектовПоТипу); 	
	ИначеЕсли ИмяТипа = "ПланСчетов.Управленческий" Тогда		
		Менеджер = ПланыСчетов.Управленческий;			
		Значение =    ПолучитьСоздатьОбъект(ОбъектXDTO, Менеджер, "КодСчета", СоответстияОбъектовПоТипу, Ложь);  		
	ИначеЕсли ИмяТипа = "Справочник.СтраныМира" Тогда 	
		Менеджер = Справочники.СтраныМира;			
		Значение =    ПолучитьСоздатьОбъект(ОбъектXDTO, Менеджер, "Код", СоответстияОбъектовПоТипу);  	           	
	ИначеЕсли ИмяТипа = "Справочник.НазначенияОбъектовНедвижимости" Тогда  
		Менеджер = Справочники.НазначенияОбъектовНедвижимости;
		Значение =    ПолучитьСоздатьОбъект(ОбъектXDTO, Менеджер, "НаименованиеПолное", СоответстияОбъектовПоТипу);		
	ИначеЕсли ИмяТипа = "Справочник.ВидыНедвижимости" Тогда     
		Менеджер = Справочники.ВидыНедвижимости;
		Значение =    ПолучитьСоздатьОбъект(ОбъектXDTO, Менеджер, "Наименование", СоответстияОбъектовПоТипу);  
	ИначеЕсли ИмяТипа = "Справочник.ВидыДокументовФизическихЛиц" Тогда     
		Менеджер = Справочники.ВидыДокументовФизическихЛиц;
		Значение =    ПолучитьСоздатьОбъект(ОбъектXDTO, Менеджер, "ВидыДокументовФизическихЛиц", СоответстияОбъектовПоТипу); 
	ИначеЕсли ИмяТипа = "Документ.ДокументРасчетовСКонтрагентом" Тогда
		Менеджер = Документы.ДокументРасчетовСКонтрагентом; 
		Значение =    ПолучитьСоздатьДокументРасчетовСКонтрагентом(ОбъектXDTO);
	ИначеЕсли ИмяТипа = "Документ.ПартияПайщика" Тогда
		Менеджер = Документы.ПартияПайщика; 
		Значение =    ПолучитьСоздатьПартииПайщиков(ОбъектXDTO);
	ИначеЕсли ИмяТипа = "Документ.ПартияПайщикаВУ" Тогда
		Менеджер = Документы.ПартияПайщикаВУ; 
		Значение =    ПолучитьСоздатьПартииПайщиковВУ(ОбъектXDTO);
	Иначе
		
	
		ВызватьИсключение(111);
		
	КонецЕсли;	
	
	Возврат Значение;
	
КонецФункции  

//todo сделать получение и сопоставление перед загрузкой и выгрузить в ТЗ
//далее выбирать уже созданные из ТЗ

Функция ПолучитьСоздатьДокументРасчетовСКонтрагентом(ОбъектXDTO) 
	
	СсылкаНаОбъект = Документы.ДокументРасчетовСКонтрагентом.ПустаяСсылка();
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат СсылкаНаОбъект;
	КонецЕсли;
	
	Контрагент = Неопределено;
	
	Дата = ОбъектXDTO.Реквизиты.ДатаВходящегоДокумента;
	Номер = ОбъектXDTO.Реквизиты.НомерВходящегоДокумента;
	Портфель = ПолучитьСсылкуНаОбъект(ОбъектXDTO.Реквизиты.Портфель.Ссылка, Справочники.Портфели);   
	
	Если ОбъектXDTO.Реквизиты.Контрагент <> Неопределено Тогда
		Контрагент = ПолучитьСсылкуНаОбъект(ОбъектXDTO.Реквизиты.Контрагент.Ссылка, Справочники.Контрагенты);	
	КонецЕсли;	
	
	Комментарий = ОбъектXDTO.Реквизиты.Комментарий;             
	
	СсылкаНаОбъект = Документы.ДокументРасчетовСКонтрагентом.ПустаяСсылка();
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ДокументРасчетовСКонтрагентом.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ДокументРасчетовСКонтрагентом КАК ДокументРасчетовСКонтрагентом
	|ГДЕ
	|	ДокументРасчетовСКонтрагентом.Номер = &Номер
	|	И ДокументРасчетовСКонтрагентом.Дата = &Дата
	|	И ДокументРасчетовСКонтрагентом.Портфель = &Портфель
	|	И &ПоискКонтрагента";
	
	Запрос.УстановитьПараметр("Номер",Номер );
	Запрос.УстановитьПараметр("Дата",Дата );
	Запрос.УстановитьПараметр("Портфель",Портфель );
	
	Если Контрагент = Неопределено Тогда
		Запрос.УстановитьПараметр("ПоискКонтрагента", Истина);	
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоискКонтрагента", "ДокументРасчетовСКонтрагентом.Контрагент = &Контрагент");
		Запрос.УстановитьПараметр("Контрагент",Контрагент);
	КонецЕсли;
	
	
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		СсылкаНаОбъект = Выборка.Ссылка;
	Иначе      	
		ДокументОбъект = Документы.ДокументРасчетовСКонтрагентом.СоздатьДокумент();
		ДокументОбъект.Дата = Дата;
		ДокументОбъект.Номер = Номер;
		ДокументОбъект.Портфель = Портфель;
		ДокументОбъект.Контрагент = Контрагент;
		ДокументОбъект.Комментарий = Комментарий;   		
		
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		
		Успех = ЗаписатьДокументОстатков(ДокументОбъект);
		
		Если Успех Тогда				
			СсылкаНаОбъект = ДокументОбъект.Ссылка;			
		КонецЕсли; 	        
		
	КонецЕсли;
	
	
	Возврат СсылкаНаОбъект;	
	
	
КонецФункции

Функция ПолучитьСоздатьПартииПайщиков(ОбъектXDTO)
	
	СсылкаНаОбъект = Документы.ПартияПайщика.ПустаяСсылка();
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат СсылкаНаОбъект;
	КонецЕсли;

	Дата = ОбъектXDTO.Реквизиты.ДатаВходящегоДокумента;
	Номер = ОбъектXDTO.Реквизиты.НомерВходящегоДокумента;
	Портфель = ПолучитьСсылкуНаОбъект(ОбъектXDTO.Реквизиты.Портфель.Ссылка, Справочники.Портфели); 
	Контрагент = ПолучитьСсылкуНаОбъект(ОбъектXDTO.Реквизиты.Контрагент.Ссылка, Справочники.Контрагенты); 
	Комментарий = ОбъектXDTO.Реквизиты.Комментарий;             
	
	СсылкаНаОбъект = Документы.ПартияПайщика.ПустаяСсылка();
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПартияПайщика.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.ПартияПайщика КАК ПартияПайщика
	               |ГДЕ
	               |	ПартияПайщика.Номер = &Номер
	               |	И ПартияПайщика.Дата = &Дата
	               |	И ПартияПайщика.Портфель = &Портфель
	               |	И ПартияПайщика.Контрагент = &Контрагент";
	
	Запрос.УстановитьПараметр("Номер",Номер );
	Запрос.УстановитьПараметр("Дата",Дата );
	Запрос.УстановитьПараметр("Портфель",Портфель );
	Запрос.УстановитьПараметр("Контрагент",Контрагент);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		СсылкаНаОбъект = Выборка.Ссылка;
	Иначе      	
		ДокументОбъект = Документы.ПартияПайщика.СоздатьДокумент();
		ДокументОбъект.Дата = Дата;
		ДокументОбъект.Номер = Номер;
		ДокументОбъект.Портфель = Портфель;
		ДокументОбъект.Контрагент = Контрагент;
		ДокументОбъект.Комментарий = Комментарий;   		
		
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		
		Успех = ЗаписатьДокументОстатков(ДокументОбъект);
		
		Если Успех Тогда				
			СсылкаНаОбъект = ДокументОбъект.Ссылка;			
		КонецЕсли; 	        
		
	КонецЕсли;
	
	
	Возврат СсылкаНаОбъект;	
	
	
КонецФункции

Функция ПолучитьСоздатьПартииПайщиковВУ(ОбъектXDTO)

	СсылкаНаОбъект = Документы.ПартияПайщикаВУ.ПустаяСсылка();
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат СсылкаНаОбъект;
	КонецЕсли;
	
	Дата = ОбъектXDTO.Реквизиты.ДатаВходящегоДокумента;
	Номер = ОбъектXDTO.Реквизиты.НомерВходящегоДокумента;
	Портфель = ПолучитьСсылкуНаОбъект(ОбъектXDTO.Реквизиты.Портфель.Ссылка, Справочники.Портфели); 
	Контрагент = ПолучитьСсылкуНаОбъект(ОбъектXDTO.Реквизиты.Контрагент.Ссылка, Справочники.Контрагенты); 
	Комментарий = ОбъектXDTO.Реквизиты.Комментарий;             
	
	СсылкаНаОбъект = Документы.ПартияПайщикаВУ.ПустаяСсылка();
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПартияПайщикаВУ.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.ПартияПайщикаВУ КАК ПартияПайщикаВУ
	               |ГДЕ
	               |	ПартияПайщикаВУ.Номер = &Номер
	               |	И ПартияПайщикаВУ.Дата = &Дата
	               |	И ПартияПайщикаВУ.Портфель = &Портфель
	               |	И ПартияПайщикаВУ.КонечныйВладелец = &Контрагент";
	
	Запрос.УстановитьПараметр("Номер",Номер );
	Запрос.УстановитьПараметр("Дата",Дата );
	Запрос.УстановитьПараметр("Портфель",Портфель );
	Запрос.УстановитьПараметр("Контрагент",Контрагент);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		СсылкаНаОбъект = Выборка.Ссылка;
	Иначе      	
		ДокументОбъект = Документы.ПартияПайщикаВУ.СоздатьДокумент();
		ДокументОбъект.Дата = Дата;
		ДокументОбъект.Номер = Номер;
		ДокументОбъект.Портфель = Портфель;
		ДокументОбъект.КонечныйВладелец = Контрагент;
		ДокументОбъект.Комментарий = Комментарий;   		
		
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		
		Успех = ЗаписатьДокументОстатков(ДокументОбъект);
		
		Если Успех Тогда				
			СсылкаНаОбъект = ДокументОбъект.Ссылка;			
		КонецЕсли; 	        
		
	КонецЕсли;
	
	
	Возврат СсылкаНаОбъект;	
	
	
КонецФункции



Функция ПолучитьСоздатьОбъект(ОбъектXDTO, Менеджер, ИмяРеквизитаПоиска, ОбъектыПоТипу, СоздаватьНенайденные = Истина) 
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат Менеджер.ПустаяСсылка();
	КонецЕсли;        
	
	//todo скорректировать
	Если ОбъектXDTO.Свойства().Получить("Реквизиты") = Неопределено Тогда
		Код = СокрЛП(ОбъектXDTO[ИмяРеквизитаПоиска]); 	
	Иначе
		Код = СокрЛП(ОбъектXDTO.Реквизиты[ИмяРеквизитаПоиска]); 	
	КонецЕсли;     	
	
	
	Если ПустаяСтрока(Код) Тогда
		Значение = Менеджер.ПустаяСсылка(); 				
	Иначе
		Значение = ОбъектыПоТипу[Код];	
		
		Если Значение = Неопределено И СоздаватьНенайденные Тогда 	
			
			ОбъектЗагрузки = ОбщаяЗагрузка(ОбъектXDTO, Менеджер);
			Значение = ОбъектЗагрузки.Ссылка;
			
			ОбъектыПоТипу[Код] = Значение; 
					
		КонецЕсли;	  
		
		
	КонецЕсли;   
	
	Если Не ЗначениеЗаполнено(Значение) Тогда
		Сообщить(СтрШаблон("Не найдено соответствие для значения '%1' для типа '%2'", Код, Строка(Менеджер))); 	
	КонецЕсли;
		

	
	Возврат Значение;
	
КонецФункции
    
Процедура ЗагрузитьДанныеОбъектов(ОбъектыXDTO, ТипКЗагрузке = "")
	
	Для Каждого ОбъектыМетаданных Из РаботаСXDTO.ОбъектыСписка(ОбъектыXDTO.Справочники) Цикл   
		
		Для Каждого СвойствоОбъектаДанных Из ОбъектыМетаданных.Свойства() Цикл   
			
			ОбъектыДанных = ОбъектыМетаданных[СвойствоОбъектаДанных.Имя];   
			
			
			Если  ОбъектыДанных.Количество() = 0 Тогда
				Продолжить;	
			КонецЕсли;
			
			Сообщить(СвойствоОбъектаДанных.Имя);  

	
			Для Каждого ОбъектXDTO Из ОбъектыДанных Цикл
				
				ОбщаяЗагрузка(ОбъектXDTO); 	
				
			КонецЦикла;
			
		КонецЦикла; 		
		
	КонецЦикла;     
	
	Для Каждого ОбъектыМетаданных Из РаботаСXDTO.ОбъектыСписка(ОбъектыXDTO.Документы) Цикл   
		
		Для Каждого СвойствоОбъектаДанных Из ОбъектыМетаданных.Свойства() Цикл   
			
			ОбъектыДанных = ОбъектыМетаданных[СвойствоОбъектаДанных.Имя]; 			
			
			Если  ОбъектыДанных.Количество() = 0 Тогда
				Продолжить;	
			КонецЕсли;
			
			Сообщить(СвойствоОбъектаДанных.Имя);
	
			Для Каждого ОбъектXDTO Из ОбъектыДанных Цикл
				
				ОбщаяЗагрузка(ОбъектXDTO); 	
				
			КонецЦикла;
				
		КонецЦикла; 		
		
	КонецЦикла;

	
		
КонецПроцедуры

Процедура ЗагрузитьДанныеОбъектовПоТипу(ОбъектыXDTO, Вид, Тип)

	ОбъектыДанных = ОбъектыXDTO[Вид][Тип];   
	
	Если  ОбъектыДанных.Количество() > 0 Тогда
		
		Для Каждого ОбъектXDTO Из ОбъектыДанных Цикл
				
				ОбщаяЗагрузка(ОбъектXDTO); 	
				
		КонецЦикла;  	
		
	КонецЕсли;
	
	
КонецПроцедуры

Функция ТаблицаОбъектов(ТипОбъектов)
	
	Таблица = Новый ТаблицаЗначений;	
	Таблица.Колонки.Добавить("Ссылка", Новый ОписаниеТипов(ТипОбъектов));
	
	Возврат Таблица;
	
	
КонецФункции
	
 

Функция ЗаписатьДокументОстатков(ДокументОбъект)
	
	Успех = Истина;
		
	ДокументОбъект.ОбменДанными.Загрузка = Истина;  	
	
	Попытка		
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);   	
	Исключение    	
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()); 		
		ТекстОшибки = СтрШаблон("Не удалось записать документ '%1' на дату '%2' по причине: '%3'", 
		ДокументОбъект, ДокументОбъект.Дата, ОписаниеОшибки);		 
		
		Успех = Ложь;
		
		
		
	КонецПопытки; 
 
Возврат Успех;	
	
КонецФункции


Процедура ЗаполнитьТаблицуДокументаОстатков(ТаблицаДокумента, ТаблицаXDTO)
	
	ТаблицаДокумента.Очистить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаXDTO Цикл    
		
		СвойстваДанных = СтрокаТаблицы.Свойства();  
		
		НоваяСтрокаДокумента = ТаблицаДокумента.Добавить();
		
		Для Каждого Свойство Из СвойстваДанных Цикл
			
			ЗначениеЭлемента = СтрокаТаблицы[Свойство.Имя];	        
			
			Если ЗначениеЭлемента = Неопределено Тогда
				Продолжить;
			КонецЕсли;     
			
			Значение = ПолучитьЗначениеОбъекта(ЗначениеЭлемента, Свойство.Тип.Имя);
			
			НоваяСтрокаДокумента[Свойство.Имя] = Значение;
			
		КонецЦикла;
		
	КонецЦикла;      	
	
КонецПроцедуры


Функция ПолучитьСсылкуНаОбъект(Идентификатор, МенеджерОбъекта)  
	
	гуид = Новый УникальныйИдентификатор(Идентификатор);

	Ссылка = МенеджерОбъекта.ПолучитьСсылку(гуид);	
	
	Возврат Ссылка;
	
КонецФункции             

Функция ОбъектСуществуетПоСсылке(СсылкаНаОбъект) 
	
	Если Не ЗначениеЗаполнено(СсылкаНаОбъект) Тогда 	
		Существует = Ложь;	
	Иначе 	
		Существует = СтрНайти(Строка(СсылкаНаОбъект), "не найден") = 0;			
	КонецЕсли; 
	
	Возврат Существует;
	
КонецФункции    

Функция СоответствияМетаданных()

	Результат = Новый Соответствие();
	
	Результат.Вставить("Справочник.Активы", Справочники.Активы);
	Результат.Вставить("Справочник.Акции", Справочники.Акции);
	Результат.Вставить("Справочник.БанковскиеСчета", Справочники.БанковскиеСчета);
	Результат.Вставить("Справочник.БрокерскиеСчета", Справочники.БрокерскиеСчета);
	Результат.Вставить("Справочник.ДоговорыКонтрагентов", Справочники.ДоговорыКонтрагентов);
	Результат.Вставить("Справочник.ДенежныеТребования", Справочники.ДенежныеТребования);
	Результат.Вставить("Справочник.ДолиУК", Справочники.ДолиУК);
	Результат.Вставить("Справочник.ЗемельныеУчастки", Справочники.ЗемельныеУчастки);
	Результат.Вставить("Справочник.ИмущественныеПрава", Справочники.ИмущественныеПрава);
	Результат.Вставить("Справочник.Контрагенты", Справочники.Контрагенты);
	Результат.Вставить("Справочник.Недвижимость", Справочники.Недвижимость);
	Результат.Вставить("Справочник.ОрганизационноПравовыеФормы", Справочники.ОрганизационноПравовыеФормы);
	Результат.Вставить("Справочник.Портфели", Справочники.Портфели);
	Результат.Вставить("Справочник.СтраныМира", Справочники.СтраныМира);
	Результат.Вставить("Справочник.ФизическиеЛица", Справочники.ФизическиеЛица);
	Результат.Вставить("Справочник.Банки", Справочники.Банки);
	Результат.Вставить("Справочник.Биржи", Справочники.Биржи);
	Результат.Вставить("Справочник.ВидыНедвижимости", Справочники.ВидыНедвижимости);
	Результат.Вставить("Справочник.НазначенияОбъектовНедвижимости", Справочники.НазначенияОбъектовНедвижимости);           
	Результат.Вставить("Справочник.ВидыДокументовФизическихЛиц", Справочники.ВидыДокументовФизическихЛиц); 
	Результат.Вставить("Перечисление.ВидыДокументовФизическихЛиц", Справочники.ВидыДокументовФизическихЛиц); 
	Результат.Вставить("Справочник.ЛицевыеСчетаПайщиков", Справочники.ЛицевыеСчетаПайщиков);                    
	Результат.Вставить("Справочник.РегистрацииВНалоговомОргане", Справочники.РегистрацииВНалоговомОргане);    
	
	Результат.Вставить("Перечисление.ВидЗаписиОРегистрации", Перечисления.ВидЗаписиОРегистрации);
	
	Результат.Вставить("СправочникСсылка.Активы", Справочники.Активы);
	Результат.Вставить("СправочникСсылка.Акции", Справочники.Акции);
	Результат.Вставить("СправочникСсылка.БанковскиеСчета", Справочники.БанковскиеСчета);
	Результат.Вставить("СправочникСсылка.БрокерскиеСчета", Справочники.БрокерскиеСчета);
	Результат.Вставить("СправочникСсылка.ДоговорыКонтрагентов", Справочники.ДоговорыКонтрагентов);
	Результат.Вставить("СправочникСсылка.ДенежныеТребования", Справочники.ДенежныеТребования);
	Результат.Вставить("СправочникСсылка.ДолиУК", Справочники.ДолиУК);
	Результат.Вставить("СправочникСсылка.ЗемельныеУчастки", Справочники.ЗемельныеУчастки);
	Результат.Вставить("СправочникСсылка.ИмущественныеПрава", Справочники.ИмущественныеПрава);
	Результат.Вставить("СправочникСсылка.Контрагенты", Справочники.Контрагенты);
	Результат.Вставить("СправочникСсылка.Недвижимость", Справочники.Недвижимость);
	Результат.Вставить("СправочникСсылка.ОрганизационноПравовыеФормы", Справочники.ОрганизационноПравовыеФормы);
	Результат.Вставить("СправочникСсылка.Портфели", Справочники.Портфели);
	Результат.Вставить("СправочникСсылка.СтраныМира", Справочники.СтраныМира);
	Результат.Вставить("СправочникСсылка.ФизическиеЛица", Справочники.ФизическиеЛица);
	Результат.Вставить("СправочникСсылка.Банки", Справочники.Банки);
	Результат.Вставить("СправочникСсылка.Биржи", Справочники.Биржи);
	Результат.Вставить("СправочникСсылка.ВидыНедвижимости", Справочники.ВидыНедвижимости);
	Результат.Вставить("СправочникСсылка.НазначенияОбъектовНедвижимости", Справочники.НазначенияОбъектовНедвижимости);
	Результат.Вставить("СправочникСсылка.ЛицевыеСчетаПайщиков", Справочники.ЛицевыеСчетаПайщиков);
	Результат.Вставить("СправочникСсылка.РегистрацииВНалоговомОргане", Справочники.РегистрацииВНалоговомОргане);
	Результат.Вставить("Перечисление.Перечисление.ВидыДокументовФизическихЛиц", Справочники.ВидыДокументовФизическихЛиц);    
	Результат.Вставить("Перечисление.ПостановкаНаУчетВНалоговомОргане", Перечисления.ПостановкаНаУчетВНалоговомОргане); 

	
	Результат.Вставить("Документ.СделкаМНО", Документы.СделкаМНО);
	Результат.Вставить("Документ.ЗаявкаНаВыдачуПаев", Документы.ЗаявкаНаВыдачуПаев);
	Результат.Вставить("Документ.ЗаявкаНаОбменПаев", Документы.ЗаявкаНаОбменПаев);  
	
	
	Результат.Вставить("ДокументСсылка.СделкаМНО", Документы.СделкаМНО);
	Результат.Вставить("ДокументСсылка.ЗаявкаНаВыдачуПаев", Документы.ЗаявкаНаВыдачуПаев);
	Результат.Вставить("ДокументСсылка.ЗаявкаНаОбменПаев", Документы.ЗаявкаНаОбменПаев);      
	
	Результат.Вставить("Перечисление.ВидБанковскогоСчета", Перечисления.ВидБанковскогоСчета);
	Результат.Вставить("Перечисление.ВидыАгентскихДоговоров", Перечисления.ВидыАгентскихДоговоров);
	Результат.Вставить("Перечисление.ВидыГосударственныхОрганов", Перечисления.ВидыГосударственныхОрганов);
	Результат.Вставить("Перечисление.ВидыДоговоровКонтрагентов", Перечисления.ВидыДоговоровКонтрагентов);
	Результат.Вставить("Перечисление.ВидыЗаймов", Перечисления.ВидыЗаймов);
	Результат.Вставить("Перечисление.ГруппыОС", Перечисления.ГруппыОС);
	Результат.Вставить("Перечисление.КатегорииАкций", Перечисления.КатегорииАкций);
	Результат.Вставить("Перечисление.ПолФизическогоЛица", Перечисления.ПолФизическогоЛица);
	Результат.Вставить("Перечисление.ПорядокРегистрацииСчетовФактурНаАванс", Перечисления.ПорядокРегистрацииСчетовФактурНаАванс);
	Результат.Вставить("Перечисление.РолиДоговоровКонтрагента", Перечисления.РолиДоговоровКонтрагента);
	Результат.Вставить("Перечисление.СрокиЗаймов", Перечисления.СрокиЗаймов);
	Результат.Вставить("Перечисление.ТипыНедвижимости", Перечисления.ТипыНедвижимости);
	Результат.Вставить("Перечисление.ЮридическоеФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо);
	Результат.Вставить("Перечисление.ВидыИмущественныхПрав", Справочники.ВидыИмущественныхПрав);
	Результат.Вставить("Перечисление.ПериодичностьНачисленияПроцентов", Перечисления.ПериодичностьНачисленияПроцентов);
	Результат.Вставить("Перечисление.РазделыУчетаДляВводаОстатков", Перечисления.РазделыУчетаДляВводаОстатков);
	Результат.Вставить("Перечисление.СтавкиНДС", Перечисления.СтавкиНДС);
	Результат.Вставить("Перечисление.ВидыЦенностей", Перечисления.ВидыЦенностей);
	Результат.Вставить("Перечисление.ВидыЛицевыхСчетов", Перечисления.ВидыЛицевыхСчетов);
	Результат.Вставить("Перечисление.ВидыОперацийВводаОстатковПоПайщикам", Перечисления.ВидыОперацийВводаОстатковПоПайщикам);     
	Результат.Вставить("Перечисление.ВидыРазделовУчетаПаевПайщиков", Перечисления.ВидыРазделовУчетаПаевПайщиков); 
	Результат.Вставить("Перечисление.НДФЛСтавки", Перечисления.НДФЛСтавки); 
	Результат.Вставить("Перечисление.ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет); 
	
		
	Результат.Вставить("Перечисление.ВидыАктивов", ПланыВидовХарактеристик.ВидыАктивов);
	Результат.Вставить("Перечисление.КлассификаторЦБ", ПланыВидовХарактеристик.КлассификаторЦБ);
		
	Возврат Результат;	
	
КонецФункции      

Функция СоответствияОбъектыВыбора()

	Результат = Новый Соответствие();
	
	Результат.Вставить("Справочник.Валюты", Истина);
	Результат.Вставить("ПланСчетов.Управленческий", Истина);
	Результат.Вставить("Документ.ДокументРасчетовСКонтрагентом", Истина);
	Результат.Вставить("Документ.ПартияПайщика", Истина);
	Результат.Вставить("Документ.ПартияПайщикаВУ", Истина);
	Результат.Вставить("Справочник.ОрганизационноПравовыеФормы", Истина);
	Результат.Вставить("Справочник.СтраныМира", Истина);
	Результат.Вставить("Справочник.ВидыНедвижимости", Истина);
	Результат.Вставить("Справочник.НазначенияОбъектовНедвижимости", Истина);
	Результат.Вставить("Справочник.ВидыДокументовФизическихЛиц", Истина);
	
	Возврат Результат;	
	
КонецФункции

Функция ЗначениеПоУмолчанию(ВхТип)
	
	Пара = Новый Соответствие;
	Пара.Вставить(Тип("Строка") , "");
	Пара.Вставить(Тип("Число") , 0);
	Пара.Вставить(Тип("Булево") , Ложь);   
	
	Возврат Пара[ВхТип];
	
	
КонецФункции
               

&НаКлиенте
Процедура Команда1(Команда)   
	
	ПутьКСхемеОстатки = ПутьККаталогуСхем + "\Остатки.xsd";  
	ПутьКСхемеОбъекты = ПутьККаталогуСхем + "\Объекты.xsd";    
	
	Файл = Новый Файл(ПутьКСхемеОстатки);
	
	ОшибкиФайлов = Новый Массив;
	ШаблонОшибки = "Файл '%1' не найден!";
	
	Если Не Файл.Существует() Тогда
		ТекстОшибки = СтрШаблон(ШаблонОшибки, ПутьКСхемеОстатки);
		ОшибкиФайлов.Добавить(ТекстОшибки);
	Иначе
		ДанныеФайла = Новый ДвоичныеДанные(ПутьКСхемеОстатки);
		АдресФайлаСхемыОстатки = ПоместитьВоВременноеХранилище(ДанныеФайла);  	
	КонецЕсли; 
	
	Файл = Новый Файл(ПутьКСхемеОбъекты);
	
	Если Не Файл.Существует() Тогда
		ТекстОшибки = СтрШаблон(ШаблонОшибки, ПутьКСхемеОбъекты);
		ОшибкиФайлов.Добавить(ТекстОшибки);    
	Иначе		
		ДанныеФайла = Новый ДвоичныеДанные(ПутьКСхемеОбъекты);
		АдресФайлаСхемыОбъекты = ПоместитьВоВременноеХранилище(ДанныеФайла); 
	КонецЕсли;   
	
	
	//Проверка наличия файлов загрузки
	
	Файл = Новый Файл(ПутьКФайлуЗагрузкиОстатков); 
	
	Если Не Файл.Существует() Тогда
		ТекстОшибки = СтрШаблон(ШаблонОшибки, ПутьКФайлуЗагрузкиОстатков);
		ОшибкиФайлов.Добавить(ТекстОшибки);    
	Иначе		
		ДанныеФайла = Новый ДвоичныеДанные(ПутьКФайлуЗагрузкиОстатков);
		АдресФайлаОстатки = ПоместитьВоВременноеХранилище(ДанныеФайла); 
	КонецЕсли;
	
	
	Файл = Новый Файл(ПутьКФайлуЗагрузкиОбъектов); 
	
	Если Не Файл.Существует() Тогда
		ТекстОшибки = СтрШаблон(ШаблонОшибки, ПутьКФайлуЗагрузкиОбъектов);
		ОшибкиФайлов.Добавить(ТекстОшибки);    
	Иначе		
		ДанныеФайла = Новый ДвоичныеДанные(ПутьКФайлуЗагрузкиОбъектов);
		АдресФайлаОбъекты = ПоместитьВоВременноеХранилище(ДанныеФайла); 
	КонецЕсли;
	
	Если ОшибкиФайлов.Количество() > 0 Тогда
		
		ТекстИсключения = СтрСоединить(ОшибкиФайлов, Символы.ПС);
		ВызватьИсключение(ТекстИсключения);
		
	КонецЕсли;   	
	
	Команда1НаСервере();     
	
	ЗагрузитьОтборПоПортфелям();
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьККаталогуСхемНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Диалог.Показать(Новый ОписаниеОповещения("ПутьККаталогуСхемНачалоВыбораЗавершение", ЭтаФорма)); 

КонецПроцедуры    

&НаКлиенте
Процедура ПутьККаталогуСхемНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ВыбранныеФайлы) Тогда
		ПутьККаталогуСхем = ВыбранныеФайлы[0];
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуЗагрузкиОстатковНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Показать(Новый ОписаниеОповещения("ПутьКФайлуОстатковНачалоВыбораЗавершение", ЭтаФорма));
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуОстатковНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ВыбранныеФайлы) Тогда
		ПутьКФайлуЗагрузкиОстатков = ВыбранныеФайлы[0];
	КонецЕсли;

КонецПроцедуры

                      
&НаКлиенте
Процедура ПутьКФайлуЗагрузкиОбъектовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Показать(Новый ОписаниеОповещения("ПутьКФайлуОбъектовНачалоВыбораЗавершение", ЭтаФорма));
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуОбъектовНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ВыбранныеФайлы) Тогда
		ПутьКФайлуЗагрузкиОбъектов = ВыбранныеФайлы[0];
	КонецЕсли;

КонецПроцедуры

Процедура ЗагрузитьОтборПоПортфелям()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Портфели.Ссылка КАК Портфель
	|ИЗ
	|	Справочник.Портфели КАК Портфели
	|ГДЕ
	|	НЕ Портфели.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Портфели.Наименование";
	
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();  
	
	ТекущийОтбор = ОтборПортфелей.Выгрузить();
	
	ВсеПортфели = Результат.Выгрузить().ВыгрузитьКолонку("Портфель");
	
	Для Каждого Портфель Из ВсеПортфели Цикл   
		    
		Отбор = Новый Структура("Портфель", Портфель);
		
		Если ТекущийОтбор.НайтиСтроки(Отбор).Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		нс = ОтборПортфелей.Добавить();
		нс.Портфель = Портфель;
		нс.Загружать = Ложь;
		
	КонецЦикла;
	              
КонецПроцедуры

&НаКлиенте
Процедура ПоступлениеНаТранзитныйСчетУстановитьПометку(Команда)
	
	ИзменитьПометку(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоступлениеНаТранзитныйСчетСнятьПометку(Команда)
	
	ИзменитьПометку(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьПометку(Пометка)
	
	Для Каждого Строка Из ОтборПортфелей Цикл
		
		Строка.Пометка = Пометка;
		
	КонецЦикла;
	
КонецПроцедуры



&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ЗагрузитьОтборПоПортфелям(); 
КонецПроцедуры

